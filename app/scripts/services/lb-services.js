// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "http://localhost:3000/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "User",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Users/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__findById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__destroyById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__updateById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__get__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Users/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__create__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__delete__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__count__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Counts accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#create
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createMany
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsert
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Users",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Users/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsertWithWhere
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Users/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#exists
             * @methodOf lbServices.User
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Users/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Users/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Users/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#find
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Users",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findOne
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Users/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#updateAll
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Users/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#deleteById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Users/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#count
             * @methodOf lbServices.User
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Users/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$updateAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Users/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createChangeStream
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Users/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#login
             * @methodOf lbServices.User
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#logout
             * @methodOf lbServices.User
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Users/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#confirm
             * @methodOf lbServices.User
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Users/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#resetPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Users/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getCurrent
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Users" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.User#patchOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.User#updateOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.User#patchOrCreateWithWhere
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.User#update
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.User#destroyById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#removeById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#patchAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.User#modelName
        * @propertyOf lbServices.User
        * @description
        * The name of the model represented by this $resource,
        * i.e. `User`.
        */
        R.modelName = "User";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Student
 * @header lbServices.Student
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Student` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Student",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Students/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__findById__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__updateById__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Students/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Student.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Students/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents.findById() instead.
            "prototype$__findById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents.destroyById() instead.
            "prototype$__destroyById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentParents.updateById() instead.
            "prototype$__updateById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.busSubscriptions() instead.
            "prototype$__get__busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "GET",
            },

            // INTERNAL. Use Student.busSubscriptions.create() instead.
            "prototype$__create__busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "POST",
            },

            // INTERNAL. Use Student.busSubscriptions.update() instead.
            "prototype$__update__busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "PUT",
            },

            // INTERNAL. Use Student.busSubscriptions.destroy() instead.
            "prototype$__destroy__busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.findById() instead.
            "prototype$__findById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.marks.destroyById() instead.
            "prototype$__destroyById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.updateById() instead.
            "prototype$__updateById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.remarks.findById() instead.
            "prototype$__findById__remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks.destroyById() instead.
            "prototype$__destroyById__remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.remarks.updateById() instead.
            "prototype$__updateById__remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__get__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries accessTokens of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Students/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__create__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Students/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__delete__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Students/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$__count__accessTokens
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Counts accessTokens of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Students/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents() instead.
            "prototype$__get__studentParents": {
              isArray: true,
              url: urlBase + "/Students/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents.create() instead.
            "prototype$__create__studentParents": {
              url: urlBase + "/Students/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Student.studentParents.destroyAll() instead.
            "prototype$__delete__studentParents": {
              url: urlBase + "/Students/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentParents.count() instead.
            "prototype$__count__studentParents": {
              url: urlBase + "/Students/:id/studentParents/count",
              method: "GET",
            },

            // INTERNAL. Use Student.marks() instead.
            "prototype$__get__marks": {
              isArray: true,
              url: urlBase + "/Students/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Student.marks.create() instead.
            "prototype$__create__marks": {
              url: urlBase + "/Students/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Student.marks.destroyAll() instead.
            "prototype$__delete__marks": {
              url: urlBase + "/Students/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.count() instead.
            "prototype$__count__marks": {
              url: urlBase + "/Students/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks() instead.
            "prototype$__get__remarks": {
              isArray: true,
              url: urlBase + "/Students/:id/remarks",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks.create() instead.
            "prototype$__create__remarks": {
              url: urlBase + "/Students/:id/remarks",
              method: "POST",
            },

            // INTERNAL. Use Student.remarks.destroyAll() instead.
            "prototype$__delete__remarks": {
              url: urlBase + "/Students/:id/remarks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.remarks.count() instead.
            "prototype$__count__remarks": {
              url: urlBase + "/Students/:id/remarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#create
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Students",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#createMany
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Students",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#upsert
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Students",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#replaceOrCreate
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Students/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#upsertWithWhere
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Students/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#exists
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Students/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#findById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Students/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#replaceById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Students/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#find
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Students",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#findOne
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Students/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#updateAll
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Students/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#deleteById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Students/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#count
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Students/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#prototype$updateAttributes
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Students/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#createChangeStream
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Students/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#login
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Students/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#logout
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Students/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#confirm
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Students/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#resetPassword
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Students/reset",
              method: "POST",
            },

            // INTERNAL. Use School.students.findById() instead.
            "::findById::School::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.students.destroyById() instead.
            "::destroyById::School::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.students.updateById() instead.
            "::updateById::School::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.students() instead.
            "::get::School::students": {
              isArray: true,
              url: urlBase + "/Schools/:id/students",
              method: "GET",
            },

            // INTERNAL. Use School.students.create() instead.
            "::create::School::students": {
              url: urlBase + "/Schools/:id/students",
              method: "POST",
            },

            // INTERNAL. Use School.students.createMany() instead.
            "::createMany::School::students": {
              isArray: true,
              url: urlBase + "/Schools/:id/students",
              method: "POST",
            },

            // INTERNAL. Use School.students.destroyAll() instead.
            "::delete::School::students": {
              url: urlBase + "/Schools/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use School.students.count() instead.
            "::count::School::students": {
              url: urlBase + "/Schools/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use Class.students.findById() instead.
            "::findById::Class::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.students.destroyById() instead.
            "::destroyById::Class::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.students.updateById() instead.
            "::updateById::Class::students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.students() instead.
            "::get::Class::students": {
              isArray: true,
              url: urlBase + "/Classes/:id/students",
              method: "GET",
            },

            // INTERNAL. Use Class.students.create() instead.
            "::create::Class::students": {
              url: urlBase + "/Classes/:id/students",
              method: "POST",
            },

            // INTERNAL. Use Class.students.createMany() instead.
            "::createMany::Class::students": {
              isArray: true,
              url: urlBase + "/Classes/:id/students",
              method: "POST",
            },

            // INTERNAL. Use Class.students.destroyAll() instead.
            "::delete::Class::students": {
              url: urlBase + "/Classes/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use Class.students.count() instead.
            "::count::Class::students": {
              url: urlBase + "/Classes/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use StudentParent.student() instead.
            "::get::StudentParent::student": {
              url: urlBase + "/StudentParents/:id/student",
              method: "GET",
            },

            // INTERNAL. Use BusSubscription.student() instead.
            "::get::BusSubscription::student": {
              url: urlBase + "/BusSubscriptions/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Marks.student() instead.
            "::get::Marks::student": {
              url: urlBase + "/Marks/:id/student",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.student() instead.
            "::get::FeePayment::student": {
              url: urlBase + "/FeePayments/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Remarks.student() instead.
            "::get::Remarks::student": {
              url: urlBase + "/Remarks/:id/student",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Student#getCurrent
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Students" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Student#patchOrCreate
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Student#updateOrCreate
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Student#patchOrCreateWithWhere
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Student#update
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Student#destroyById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Student#removeById
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Student#patchAttributes
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Student#getCachedCurrent
         * @methodOf lbServices.Student
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Student#login} or
         * {@link lbServices.Student#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Student instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Student#isAuthenticated
         * @methodOf lbServices.Student
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Student#getCurrentId
         * @methodOf lbServices.Student
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Student#modelName
        * @propertyOf lbServices.Student
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Student`.
        */
        R.modelName = "Student";


            /**
             * @ngdoc method
             * @name lbServices.Student#school
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Student::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student#class
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Student::class"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.studentParents
     * @header lbServices.Student.studentParents
     * @object
     * @description
     *
     * The object `Student.studentParents` groups methods
     * manipulating `StudentParent` instances related to `Student`.
     *
     * Call {@link lbServices.Student#studentParents Student.studentParents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#studentParents
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries studentParents of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::get::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#count
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Counts studentParents of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.studentParents.count = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::count::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#create
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.create = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::create::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#createMany
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.createMany = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::createMany::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#destroyAll
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Deletes all studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyAll = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::delete::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#destroyById
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Delete a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::destroyById::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#findById
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Find a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.findById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::findById::Student::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.studentParents#updateById
             * @methodOf lbServices.Student.studentParents
             *
             * @description
             *
             * Update a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.updateById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::updateById::Student::studentParents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.busSubscriptions
     * @header lbServices.Student.busSubscriptions
     * @object
     * @description
     *
     * The object `Student.busSubscriptions` groups methods
     * manipulating `BusSubscription` instances related to `Student`.
     *
     * Call {@link lbServices.Student#busSubscriptions Student.busSubscriptions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#busSubscriptions
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Fetches hasOne relation busSubscriptions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::get::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.busSubscriptions#create
             * @methodOf lbServices.Student.busSubscriptions
             *
             * @description
             *
             * Creates a new instance in busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.create = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::create::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.busSubscriptions#createMany
             * @methodOf lbServices.Student.busSubscriptions
             *
             * @description
             *
             * Creates a new instance in busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.createMany = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::createMany::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.busSubscriptions#destroy
             * @methodOf lbServices.Student.busSubscriptions
             *
             * @description
             *
             * Deletes busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busSubscriptions.destroy = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::destroy::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.busSubscriptions#update
             * @methodOf lbServices.Student.busSubscriptions
             *
             * @description
             *
             * Update busSubscriptions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R.busSubscriptions.update = function() {
          var TargetResource = $injector.get("BusSubscription");
          var action = TargetResource["::update::Student::busSubscriptions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.marks
     * @header lbServices.Student.marks
     * @object
     * @description
     *
     * The object `Student.marks` groups methods
     * manipulating `Marks` instances related to `Student`.
     *
     * Call {@link lbServices.Student#marks Student.marks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#marks
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries marks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::get::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#count
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Counts marks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.marks.count = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::count::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#create
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.create = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::create::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#createMany
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.createMany = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::createMany::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#destroyAll
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Deletes all marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyAll = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::delete::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#destroyById
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Delete a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::destroyById::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#findById
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Find a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.findById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::findById::Student::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.marks#updateById
             * @methodOf lbServices.Student.marks
             *
             * @description
             *
             * Update a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.updateById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::updateById::Student::marks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Student.remarks
     * @header lbServices.Student.remarks
     * @object
     * @description
     *
     * The object `Student.remarks` groups methods
     * manipulating `Remarks` instances related to `Student`.
     *
     * Call {@link lbServices.Student#remarks Student.remarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Student#remarks
             * @methodOf lbServices.Student
             *
             * @description
             *
             * Queries remarks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::get::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#count
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Counts remarks of Student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.remarks.count = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::count::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#create
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Creates a new instance in remarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks.create = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::create::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#createMany
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Creates a new instance in remarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks.createMany = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::createMany::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#destroyAll
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Deletes all remarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.remarks.destroyAll = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::delete::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#destroyById
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Delete a related item by id for remarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for remarks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.remarks.destroyById = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::destroyById::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#findById
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Find a related item by id for remarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for remarks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks.findById = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::findById::Student::remarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Student.remarks#updateById
             * @methodOf lbServices.Student.remarks
             *
             * @description
             *
             * Update a related item by id for remarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for remarks
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R.remarks.updateById = function() {
          var TargetResource = $injector.get("Remarks");
          var action = TargetResource["::updateById::Student::remarks"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Staff
 * @header lbServices.Staff
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Staff` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Staff",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Staffs/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__findById__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__updateById__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Staffs/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Staff.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Staffs/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Staff.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/Staffs/:id/subject",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__get__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Queries accessTokens of Staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Staffs/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__create__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Staffs/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__delete__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Staffs/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$__count__accessTokens
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Counts accessTokens of Staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Staffs/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#create
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Staffs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#createMany
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Staffs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#upsert
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Staffs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#replaceOrCreate
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Staffs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#upsertWithWhere
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Staffs/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#exists
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Staffs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#findById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Staffs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#replaceById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Staffs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#find
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Staffs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#findOne
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Staffs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#updateAll
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Staffs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#deleteById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Staffs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#count
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Staffs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#prototype$updateAttributes
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Staffs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#createChangeStream
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Staffs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#login
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Staffs/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#logout
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Staffs/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#confirm
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Staffs/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#resetPassword
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Staffs/reset",
              method: "POST",
            },

            // INTERNAL. Use School.staffs.findById() instead.
            "::findById::School::staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.staffs.destroyById() instead.
            "::destroyById::School::staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.staffs.updateById() instead.
            "::updateById::School::staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.staffs() instead.
            "::get::School::staffs": {
              isArray: true,
              url: urlBase + "/Schools/:id/staffs",
              method: "GET",
            },

            // INTERNAL. Use School.staffs.create() instead.
            "::create::School::staffs": {
              url: urlBase + "/Schools/:id/staffs",
              method: "POST",
            },

            // INTERNAL. Use School.staffs.createMany() instead.
            "::createMany::School::staffs": {
              isArray: true,
              url: urlBase + "/Schools/:id/staffs",
              method: "POST",
            },

            // INTERNAL. Use School.staffs.destroyAll() instead.
            "::delete::School::staffs": {
              url: urlBase + "/Schools/:id/staffs",
              method: "DELETE",
            },

            // INTERNAL. Use School.staffs.count() instead.
            "::count::School::staffs": {
              url: urlBase + "/Schools/:id/staffs/count",
              method: "GET",
            },

            // INTERNAL. Use Class.staff() instead.
            "::get::Class::staff": {
              url: urlBase + "/Classes/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use Subject.staff() instead.
            "::get::Subject::staff": {
              url: urlBase + "/Subjects/:id/staff",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Staff#getCurrent
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Staffs" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Staff#patchOrCreate
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#updateOrCreate
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#patchOrCreateWithWhere
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#update
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#destroyById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#removeById
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Staff#patchAttributes
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Staff#getCachedCurrent
         * @methodOf lbServices.Staff
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Staff#login} or
         * {@link lbServices.Staff#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Staff instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Staff#isAuthenticated
         * @methodOf lbServices.Staff
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Staff#getCurrentId
         * @methodOf lbServices.Staff
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Staff#modelName
        * @propertyOf lbServices.Staff
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Staff`.
        */
        R.modelName = "Staff";


            /**
             * @ngdoc method
             * @name lbServices.Staff#school
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Staff::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Staff#subject
             * @methodOf lbServices.Staff
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Staff::subject"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Parent
 * @header lbServices.Parent
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Parent` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Parent",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Parents/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__findById__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__updateById__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Parent.studentParents.findById() instead.
            "prototype$__findById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.destroyById() instead.
            "prototype$__destroyById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Parent.studentParents.updateById() instead.
            "prototype$__updateById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__get__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Queries accessTokens of Parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Parents/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__create__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Parents/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__delete__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Parents/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$__count__accessTokens
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Counts accessTokens of Parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Parents/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents() instead.
            "prototype$__get__studentParents": {
              isArray: true,
              url: urlBase + "/Parents/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.create() instead.
            "prototype$__create__studentParents": {
              url: urlBase + "/Parents/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Parent.studentParents.destroyAll() instead.
            "prototype$__delete__studentParents": {
              url: urlBase + "/Parents/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use Parent.studentParents.count() instead.
            "prototype$__count__studentParents": {
              url: urlBase + "/Parents/:id/studentParents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#create
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Parents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#createMany
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Parents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#upsert
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Parents",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#replaceOrCreate
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Parents/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#upsertWithWhere
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Parents/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#exists
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Parents/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#findById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Parents/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#replaceById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Parents/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#find
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Parents",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#findOne
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Parents/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#updateAll
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Parents/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#deleteById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Parents/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#count
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Parents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#prototype$updateAttributes
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Parents/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#createChangeStream
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Parents/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#login
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Parents/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#logout
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Parents/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#confirm
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Parents/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#resetPassword
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Parents/reset",
              method: "POST",
            },

            // INTERNAL. Use StudentParent.parent() instead.
            "::get::StudentParent::parent": {
              url: urlBase + "/StudentParents/:id/parent",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Parent#getCurrent
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Parents" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Parent#patchOrCreate
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#updateOrCreate
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#patchOrCreateWithWhere
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#update
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#destroyById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#removeById
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Parent#patchAttributes
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Parent#getCachedCurrent
         * @methodOf lbServices.Parent
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Parent#login} or
         * {@link lbServices.Parent#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Parent instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Parent#isAuthenticated
         * @methodOf lbServices.Parent
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Parent#getCurrentId
         * @methodOf lbServices.Parent
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Parent#modelName
        * @propertyOf lbServices.Parent
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Parent`.
        */
        R.modelName = "Parent";

    /**
     * @ngdoc object
     * @name lbServices.Parent.studentParents
     * @header lbServices.Parent.studentParents
     * @object
     * @description
     *
     * The object `Parent.studentParents` groups methods
     * manipulating `StudentParent` instances related to `Parent`.
     *
     * Call {@link lbServices.Parent#studentParents Parent.studentParents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Parent#studentParents
             * @methodOf lbServices.Parent
             *
             * @description
             *
             * Queries studentParents of Parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::get::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#count
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Counts studentParents of Parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.studentParents.count = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::count::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#create
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.create = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::create::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#createMany
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.createMany = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::createMany::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#destroyAll
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Deletes all studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyAll = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::delete::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#destroyById
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Delete a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::destroyById::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#findById
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Find a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.findById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::findById::Parent::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Parent.studentParents#updateById
             * @methodOf lbServices.Parent.studentParents
             *
             * @description
             *
             * Update a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.updateById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::updateById::Parent::studentParents"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.School
 * @header lbServices.School
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `School` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "School",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Schools/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use School.staffs.findById() instead.
            "prototype$__findById__staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.staffs.destroyById() instead.
            "prototype$__destroyById__staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.staffs.updateById() instead.
            "prototype$__updateById__staffs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/staffs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.students.findById() instead.
            "prototype$__findById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.students.destroyById() instead.
            "prototype$__destroyById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.students.updateById() instead.
            "prototype$__updateById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.classes.findById() instead.
            "prototype$__findById__classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.classes.destroyById() instead.
            "prototype$__destroyById__classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.classes.updateById() instead.
            "prototype$__updateById__classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.bus.findById() instead.
            "prototype$__findById__bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.bus.destroyById() instead.
            "prototype$__destroyById__bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.bus.updateById() instead.
            "prototype$__updateById__bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.buses.findById() instead.
            "prototype$__findById__buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.buses.destroyById() instead.
            "prototype$__destroyById__buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.buses.updateById() instead.
            "prototype$__updateById__buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.timetables.findById() instead.
            "prototype$__findById__timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.timetables.destroyById() instead.
            "prototype$__destroyById__timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.timetables.updateById() instead.
            "prototype$__updateById__timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.calendars() instead.
            "prototype$__get__calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "GET",
            },

            // INTERNAL. Use School.calendars.create() instead.
            "prototype$__create__calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "POST",
            },

            // INTERNAL. Use School.calendars.update() instead.
            "prototype$__update__calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "PUT",
            },

            // INTERNAL. Use School.calendars.destroy() instead.
            "prototype$__destroy__calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.findById() instead.
            "prototype$__findById__noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards.destroyById() instead.
            "prototype$__destroyById__noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.updateById() instead.
            "prototype$__updateById__noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.assignments.findById() instead.
            "prototype$__findById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.assignments.destroyById() instead.
            "prototype$__destroyById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.assignments.updateById() instead.
            "prototype$__updateById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.libraries.findById() instead.
            "prototype$__findById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.libraries.destroyById() instead.
            "prototype$__destroyById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.libraries.updateById() instead.
            "prototype$__updateById__libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.studentParents.findById() instead.
            "prototype$__findById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.destroyById() instead.
            "prototype$__destroyById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.studentParents.updateById() instead.
            "prototype$__updateById__studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.busServices.findById() instead.
            "prototype$__findById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.busServices.destroyById() instead.
            "prototype$__destroyById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.busServices.updateById() instead.
            "prototype$__updateById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.expensePayments.findById() instead.
            "prototype$__findById__expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments.destroyById() instead.
            "prototype$__destroyById__expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.expensePayments.updateById() instead.
            "prototype$__updateById__expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.feeSetups.findById() instead.
            "prototype$__findById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups.destroyById() instead.
            "prototype$__destroyById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeSetups.updateById() instead.
            "prototype$__updateById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.exams.findById() instead.
            "prototype$__findById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.exams.destroyById() instead.
            "prototype$__destroyById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.exams.updateById() instead.
            "prototype$__updateById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.grades.findById() instead.
            "prototype$__findById__grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.grades.destroyById() instead.
            "prototype$__destroyById__grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.grades.updateById() instead.
            "prototype$__updateById__grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.workingDays.findById() instead.
            "prototype$__findById__workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays.destroyById() instead.
            "prototype$__destroyById__workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.workingDays.updateById() instead.
            "prototype$__updateById__workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.staffs() instead.
            "prototype$__get__staffs": {
              isArray: true,
              url: urlBase + "/Schools/:id/staffs",
              method: "GET",
            },

            // INTERNAL. Use School.staffs.create() instead.
            "prototype$__create__staffs": {
              url: urlBase + "/Schools/:id/staffs",
              method: "POST",
            },

            // INTERNAL. Use School.staffs.destroyAll() instead.
            "prototype$__delete__staffs": {
              url: urlBase + "/Schools/:id/staffs",
              method: "DELETE",
            },

            // INTERNAL. Use School.staffs.count() instead.
            "prototype$__count__staffs": {
              url: urlBase + "/Schools/:id/staffs/count",
              method: "GET",
            },

            // INTERNAL. Use School.students() instead.
            "prototype$__get__students": {
              isArray: true,
              url: urlBase + "/Schools/:id/students",
              method: "GET",
            },

            // INTERNAL. Use School.students.create() instead.
            "prototype$__create__students": {
              url: urlBase + "/Schools/:id/students",
              method: "POST",
            },

            // INTERNAL. Use School.students.destroyAll() instead.
            "prototype$__delete__students": {
              url: urlBase + "/Schools/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use School.students.count() instead.
            "prototype$__count__students": {
              url: urlBase + "/Schools/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use School.classes() instead.
            "prototype$__get__classes": {
              isArray: true,
              url: urlBase + "/Schools/:id/classes",
              method: "GET",
            },

            // INTERNAL. Use School.classes.create() instead.
            "prototype$__create__classes": {
              url: urlBase + "/Schools/:id/classes",
              method: "POST",
            },

            // INTERNAL. Use School.classes.destroyAll() instead.
            "prototype$__delete__classes": {
              url: urlBase + "/Schools/:id/classes",
              method: "DELETE",
            },

            // INTERNAL. Use School.classes.count() instead.
            "prototype$__count__classes": {
              url: urlBase + "/Schools/:id/classes/count",
              method: "GET",
            },

            // INTERNAL. Use School.bus() instead.
            "prototype$__get__bus": {
              isArray: true,
              url: urlBase + "/Schools/:id/bus",
              method: "GET",
            },

            // INTERNAL. Use School.bus.create() instead.
            "prototype$__create__bus": {
              url: urlBase + "/Schools/:id/bus",
              method: "POST",
            },

            // INTERNAL. Use School.bus.destroyAll() instead.
            "prototype$__delete__bus": {
              url: urlBase + "/Schools/:id/bus",
              method: "DELETE",
            },

            // INTERNAL. Use School.bus.count() instead.
            "prototype$__count__bus": {
              url: urlBase + "/Schools/:id/bus/count",
              method: "GET",
            },

            // INTERNAL. Use School.buses() instead.
            "prototype$__get__buses": {
              isArray: true,
              url: urlBase + "/Schools/:id/buses",
              method: "GET",
            },

            // INTERNAL. Use School.buses.create() instead.
            "prototype$__create__buses": {
              url: urlBase + "/Schools/:id/buses",
              method: "POST",
            },

            // INTERNAL. Use School.buses.destroyAll() instead.
            "prototype$__delete__buses": {
              url: urlBase + "/Schools/:id/buses",
              method: "DELETE",
            },

            // INTERNAL. Use School.buses.count() instead.
            "prototype$__count__buses": {
              url: urlBase + "/Schools/:id/buses/count",
              method: "GET",
            },

            // INTERNAL. Use School.timetables() instead.
            "prototype$__get__timetables": {
              isArray: true,
              url: urlBase + "/Schools/:id/timetables",
              method: "GET",
            },

            // INTERNAL. Use School.timetables.create() instead.
            "prototype$__create__timetables": {
              url: urlBase + "/Schools/:id/timetables",
              method: "POST",
            },

            // INTERNAL. Use School.timetables.destroyAll() instead.
            "prototype$__delete__timetables": {
              url: urlBase + "/Schools/:id/timetables",
              method: "DELETE",
            },

            // INTERNAL. Use School.timetables.count() instead.
            "prototype$__count__timetables": {
              url: urlBase + "/Schools/:id/timetables/count",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards() instead.
            "prototype$__get__noticeboards": {
              isArray: true,
              url: urlBase + "/Schools/:id/noticeboards",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards.create() instead.
            "prototype$__create__noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards",
              method: "POST",
            },

            // INTERNAL. Use School.noticeboards.destroyAll() instead.
            "prototype$__delete__noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.count() instead.
            "prototype$__count__noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards/count",
              method: "GET",
            },

            // INTERNAL. Use School.assignments() instead.
            "prototype$__get__assignments": {
              isArray: true,
              url: urlBase + "/Schools/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use School.assignments.create() instead.
            "prototype$__create__assignments": {
              url: urlBase + "/Schools/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use School.assignments.destroyAll() instead.
            "prototype$__delete__assignments": {
              url: urlBase + "/Schools/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use School.assignments.count() instead.
            "prototype$__count__assignments": {
              url: urlBase + "/Schools/:id/assignments/count",
              method: "GET",
            },

            // INTERNAL. Use School.libraries() instead.
            "prototype$__get__libraries": {
              isArray: true,
              url: urlBase + "/Schools/:id/libraries",
              method: "GET",
            },

            // INTERNAL. Use School.libraries.create() instead.
            "prototype$__create__libraries": {
              url: urlBase + "/Schools/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use School.libraries.destroyAll() instead.
            "prototype$__delete__libraries": {
              url: urlBase + "/Schools/:id/libraries",
              method: "DELETE",
            },

            // INTERNAL. Use School.libraries.count() instead.
            "prototype$__count__libraries": {
              url: urlBase + "/Schools/:id/libraries/count",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents() instead.
            "prototype$__get__studentParents": {
              isArray: true,
              url: urlBase + "/Schools/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.create() instead.
            "prototype$__create__studentParents": {
              url: urlBase + "/Schools/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use School.studentParents.destroyAll() instead.
            "prototype$__delete__studentParents": {
              url: urlBase + "/Schools/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use School.studentParents.count() instead.
            "prototype$__count__studentParents": {
              url: urlBase + "/Schools/:id/studentParents/count",
              method: "GET",
            },

            // INTERNAL. Use School.busServices() instead.
            "prototype$__get__busServices": {
              isArray: true,
              url: urlBase + "/Schools/:id/busServices",
              method: "GET",
            },

            // INTERNAL. Use School.busServices.create() instead.
            "prototype$__create__busServices": {
              url: urlBase + "/Schools/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use School.busServices.destroyAll() instead.
            "prototype$__delete__busServices": {
              url: urlBase + "/Schools/:id/busServices",
              method: "DELETE",
            },

            // INTERNAL. Use School.busServices.count() instead.
            "prototype$__count__busServices": {
              url: urlBase + "/Schools/:id/busServices/count",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments() instead.
            "prototype$__get__expensePayments": {
              isArray: true,
              url: urlBase + "/Schools/:id/expensePayments",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments.create() instead.
            "prototype$__create__expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments",
              method: "POST",
            },

            // INTERNAL. Use School.expensePayments.destroyAll() instead.
            "prototype$__delete__expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments",
              method: "DELETE",
            },

            // INTERNAL. Use School.expensePayments.count() instead.
            "prototype$__count__expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments/count",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups() instead.
            "prototype$__get__feeSetups": {
              isArray: true,
              url: urlBase + "/Schools/:id/feeSetups",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups.create() instead.
            "prototype$__create__feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use School.feeSetups.destroyAll() instead.
            "prototype$__delete__feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeSetups.count() instead.
            "prototype$__count__feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups/count",
              method: "GET",
            },

            // INTERNAL. Use School.exams() instead.
            "prototype$__get__exams": {
              isArray: true,
              url: urlBase + "/Schools/:id/exams",
              method: "GET",
            },

            // INTERNAL. Use School.exams.create() instead.
            "prototype$__create__exams": {
              url: urlBase + "/Schools/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use School.exams.destroyAll() instead.
            "prototype$__delete__exams": {
              url: urlBase + "/Schools/:id/exams",
              method: "DELETE",
            },

            // INTERNAL. Use School.exams.count() instead.
            "prototype$__count__exams": {
              url: urlBase + "/Schools/:id/exams/count",
              method: "GET",
            },

            // INTERNAL. Use School.grades() instead.
            "prototype$__get__grades": {
              isArray: true,
              url: urlBase + "/Schools/:id/grades",
              method: "GET",
            },

            // INTERNAL. Use School.grades.create() instead.
            "prototype$__create__grades": {
              url: urlBase + "/Schools/:id/grades",
              method: "POST",
            },

            // INTERNAL. Use School.grades.destroyAll() instead.
            "prototype$__delete__grades": {
              url: urlBase + "/Schools/:id/grades",
              method: "DELETE",
            },

            // INTERNAL. Use School.grades.count() instead.
            "prototype$__count__grades": {
              url: urlBase + "/Schools/:id/grades/count",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays() instead.
            "prototype$__get__workingDays": {
              isArray: true,
              url: urlBase + "/Schools/:id/workingDays",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays.create() instead.
            "prototype$__create__workingDays": {
              url: urlBase + "/Schools/:id/workingDays",
              method: "POST",
            },

            // INTERNAL. Use School.workingDays.destroyAll() instead.
            "prototype$__delete__workingDays": {
              url: urlBase + "/Schools/:id/workingDays",
              method: "DELETE",
            },

            // INTERNAL. Use School.workingDays.count() instead.
            "prototype$__count__workingDays": {
              url: urlBase + "/Schools/:id/workingDays/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#create
             * @methodOf lbServices.School
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Schools",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#createMany
             * @methodOf lbServices.School
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Schools",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#upsert
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Schools",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#replaceOrCreate
             * @methodOf lbServices.School
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Schools/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#upsertWithWhere
             * @methodOf lbServices.School
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Schools/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#exists
             * @methodOf lbServices.School
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Schools/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#findById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Schools/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#replaceById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Schools/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#find
             * @methodOf lbServices.School
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Schools",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#findOne
             * @methodOf lbServices.School
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Schools/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#updateAll
             * @methodOf lbServices.School
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Schools/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#deleteById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Schools/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#count
             * @methodOf lbServices.School
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Schools/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#prototype$updateAttributes
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Schools/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.School#createChangeStream
             * @methodOf lbServices.School
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Schools/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.school() instead.
            "::get::Student::school": {
              url: urlBase + "/Students/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Staff.school() instead.
            "::get::Staff::school": {
              url: urlBase + "/Staffs/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Class.school() instead.
            "::get::Class::school": {
              url: urlBase + "/Classes/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Admin.school() instead.
            "::get::Admin::school": {
              url: urlBase + "/Admins/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Subject.school() instead.
            "::get::Subject::school": {
              url: urlBase + "/Subjects/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Bus.school() instead.
            "::get::Bus::school": {
              url: urlBase + "/Buses/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Timetable.school() instead.
            "::get::Timetable::school": {
              url: urlBase + "/Timetables/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Noticeboard.school() instead.
            "::get::Noticeboard::school": {
              url: urlBase + "/Noticeboards/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Assignment.school() instead.
            "::get::Assignment::school": {
              url: urlBase + "/Assignments/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Library.school() instead.
            "::get::Library::school": {
              url: urlBase + "/Libraries/:id/school",
              method: "GET",
            },

            // INTERNAL. Use StudentParent.school() instead.
            "::get::StudentParent::school": {
              url: urlBase + "/StudentParents/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Attendance.school() instead.
            "::get::Attendance::school": {
              url: urlBase + "/Attendances/:id/school",
              method: "GET",
            },

            // INTERNAL. Use BusService.school() instead.
            "::get::BusService::school": {
              url: urlBase + "/BusServices/:id/school",
              method: "GET",
            },

            // INTERNAL. Use ExpensePayment.school() instead.
            "::get::ExpensePayment::school": {
              url: urlBase + "/ExpensePayments/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.school() instead.
            "::get::FeeSetup::school": {
              url: urlBase + "/FeeSetups/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Exam.school() instead.
            "::get::Exam::school": {
              url: urlBase + "/Exams/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Grade.school() instead.
            "::get::Grade::school": {
              url: urlBase + "/Grades/:id/school",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.school() instead.
            "::get::WorkingDay::school": {
              url: urlBase + "/WorkingDays/:id/school",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.School#patchOrCreate
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.School#updateOrCreate
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.School#patchOrCreateWithWhere
             * @methodOf lbServices.School
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.School#update
             * @methodOf lbServices.School
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.School#destroyById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.School#removeById
             * @methodOf lbServices.School
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.School#patchAttributes
             * @methodOf lbServices.School
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.School#modelName
        * @propertyOf lbServices.School
        * @description
        * The name of the model represented by this $resource,
        * i.e. `School`.
        */
        R.modelName = "School";

    /**
     * @ngdoc object
     * @name lbServices.School.staffs
     * @header lbServices.School.staffs
     * @object
     * @description
     *
     * The object `School.staffs` groups methods
     * manipulating `Staff` instances related to `School`.
     *
     * Call {@link lbServices.School#staffs School.staffs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#staffs
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries staffs of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#count
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Counts staffs of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.staffs.count = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::count::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#create
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Creates a new instance in staffs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.create = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::create::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#createMany
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Creates a new instance in staffs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.createMany = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::createMany::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#destroyAll
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Deletes all staffs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.staffs.destroyAll = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::delete::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#destroyById
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Delete a related item by id for staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for staffs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.staffs.destroyById = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::destroyById::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#findById
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Find a related item by id for staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for staffs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.findById = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::findById::School::staffs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.staffs#updateById
             * @methodOf lbServices.School.staffs
             *
             * @description
             *
             * Update a related item by id for staffs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for staffs
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staffs.updateById = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::updateById::School::staffs"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.students
     * @header lbServices.School.students
     * @object
     * @description
     *
     * The object `School.students` groups methods
     * manipulating `Student` instances related to `School`.
     *
     * Call {@link lbServices.School#students School.students()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#students
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries students of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#count
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Counts students of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.students.count = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::count::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#create
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.create = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::create::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#createMany
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.createMany = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::createMany::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#destroyAll
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Deletes all students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyAll = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::delete::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#destroyById
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Delete a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::destroyById::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#findById
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Find a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.findById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::findById::School::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.students#updateById
             * @methodOf lbServices.School.students
             *
             * @description
             *
             * Update a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.updateById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::updateById::School::students"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.classes
     * @header lbServices.School.classes
     * @object
     * @description
     *
     * The object `School.classes` groups methods
     * manipulating `Class` instances related to `School`.
     *
     * Call {@link lbServices.School#classes School.classes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#classes
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries classes of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#count
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Counts classes of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.classes.count = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::count::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#create
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Creates a new instance in classes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes.create = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::create::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#createMany
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Creates a new instance in classes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes.createMany = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::createMany::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#destroyAll
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Deletes all classes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.classes.destroyAll = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::delete::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#destroyById
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Delete a related item by id for classes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for classes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.classes.destroyById = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::destroyById::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#findById
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Find a related item by id for classes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for classes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes.findById = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::findById::School::classes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.classes#updateById
             * @methodOf lbServices.School.classes
             *
             * @description
             *
             * Update a related item by id for classes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for classes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.classes.updateById = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::updateById::School::classes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.bus
     * @header lbServices.School.bus
     * @object
     * @description
     *
     * The object `School.bus` groups methods
     * manipulating `Bus` instances related to `School`.
     *
     * Call {@link lbServices.School#bus School.bus()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#bus
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries bus of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::get::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#count
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Counts bus of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.bus.count = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::count::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#create
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Creates a new instance in bus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus.create = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::create::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#createMany
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Creates a new instance in bus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus.createMany = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::createMany::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#destroyAll
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Deletes all bus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bus.destroyAll = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::delete::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#destroyById
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Delete a related item by id for bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bus.destroyById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::destroyById::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#findById
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Find a related item by id for bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus.findById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::findById::School::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.bus#updateById
             * @methodOf lbServices.School.bus
             *
             * @description
             *
             * Update a related item by id for bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bus
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus.updateById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::updateById::School::bus"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.buses
     * @header lbServices.School.buses
     * @object
     * @description
     *
     * The object `School.buses` groups methods
     * manipulating `Bus` instances related to `School`.
     *
     * Call {@link lbServices.School#buses School.buses()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#buses
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries buses of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::get::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#count
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Counts buses of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.buses.count = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::count::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#create
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Creates a new instance in buses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses.create = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::create::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#createMany
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Creates a new instance in buses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses.createMany = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::createMany::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#destroyAll
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Deletes all buses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.buses.destroyAll = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::delete::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#destroyById
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Delete a related item by id for buses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for buses
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.buses.destroyById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::destroyById::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#findById
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Find a related item by id for buses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for buses
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses.findById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::findById::School::buses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.buses#updateById
             * @methodOf lbServices.School.buses
             *
             * @description
             *
             * Update a related item by id for buses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for buses
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.buses.updateById = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::updateById::School::buses"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.timetables
     * @header lbServices.School.timetables
     * @object
     * @description
     *
     * The object `School.timetables` groups methods
     * manipulating `Timetable` instances related to `School`.
     *
     * Call {@link lbServices.School#timetables School.timetables()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#timetables
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries timetables of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::get::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#count
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Counts timetables of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.timetables.count = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::count::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#create
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Creates a new instance in timetables of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables.create = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::create::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#createMany
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Creates a new instance in timetables of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables.createMany = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::createMany::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#destroyAll
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Deletes all timetables of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.timetables.destroyAll = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::delete::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#destroyById
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Delete a related item by id for timetables.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for timetables
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.timetables.destroyById = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::destroyById::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#findById
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Find a related item by id for timetables.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for timetables
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables.findById = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::findById::School::timetables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.timetables#updateById
             * @methodOf lbServices.School.timetables
             *
             * @description
             *
             * Update a related item by id for timetables.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for timetables
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetables.updateById = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::updateById::School::timetables"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.calendars
     * @header lbServices.School.calendars
     * @object
     * @description
     *
     * The object `School.calendars` groups methods
     * manipulating `Calendar` instances related to `School`.
     *
     * Call {@link lbServices.School#calendars School.calendars()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#calendars
             * @methodOf lbServices.School
             *
             * @description
             *
             * Fetches hasOne relation calendars.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R.calendars = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::get::School::calendars"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.calendars#create
             * @methodOf lbServices.School.calendars
             *
             * @description
             *
             * Creates a new instance in calendars of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R.calendars.create = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::create::School::calendars"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.calendars#createMany
             * @methodOf lbServices.School.calendars
             *
             * @description
             *
             * Creates a new instance in calendars of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R.calendars.createMany = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::createMany::School::calendars"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.calendars#destroy
             * @methodOf lbServices.School.calendars
             *
             * @description
             *
             * Deletes calendars of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.calendars.destroy = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::destroy::School::calendars"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.calendars#update
             * @methodOf lbServices.School.calendars
             *
             * @description
             *
             * Update calendars of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R.calendars.update = function() {
          var TargetResource = $injector.get("Calendar");
          var action = TargetResource["::update::School::calendars"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.noticeboards
     * @header lbServices.School.noticeboards
     * @object
     * @description
     *
     * The object `School.noticeboards` groups methods
     * manipulating `Noticeboard` instances related to `School`.
     *
     * Call {@link lbServices.School#noticeboards School.noticeboards()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#noticeboards
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries noticeboards of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::get::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#count
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Counts noticeboards of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.noticeboards.count = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::count::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#create
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Creates a new instance in noticeboards of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards.create = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::create::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#createMany
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Creates a new instance in noticeboards of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards.createMany = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::createMany::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#destroyAll
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Deletes all noticeboards of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.noticeboards.destroyAll = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::delete::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#destroyById
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Delete a related item by id for noticeboards.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for noticeboards
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.noticeboards.destroyById = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::destroyById::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#findById
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Find a related item by id for noticeboards.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for noticeboards
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards.findById = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::findById::School::noticeboards"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.noticeboards#updateById
             * @methodOf lbServices.School.noticeboards
             *
             * @description
             *
             * Update a related item by id for noticeboards.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for noticeboards
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R.noticeboards.updateById = function() {
          var TargetResource = $injector.get("Noticeboard");
          var action = TargetResource["::updateById::School::noticeboards"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.assignments
     * @header lbServices.School.assignments
     * @object
     * @description
     *
     * The object `School.assignments` groups methods
     * manipulating `Assignment` instances related to `School`.
     *
     * Call {@link lbServices.School#assignments School.assignments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#assignments
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries assignments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::get::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#count
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Counts assignments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.assignments.count = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::count::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#create
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.create = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::create::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#createMany
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.createMany = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::createMany::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#destroyAll
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Deletes all assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyAll = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::delete::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#destroyById
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Delete a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::destroyById::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#findById
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Find a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.findById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::findById::School::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.assignments#updateById
             * @methodOf lbServices.School.assignments
             *
             * @description
             *
             * Update a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.updateById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::updateById::School::assignments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.libraries
     * @header lbServices.School.libraries
     * @object
     * @description
     *
     * The object `School.libraries` groups methods
     * manipulating `Library` instances related to `School`.
     *
     * Call {@link lbServices.School#libraries School.libraries()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#libraries
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries libraries of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::get::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#count
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Counts libraries of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.libraries.count = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::count::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#create
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Creates a new instance in libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.create = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::create::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#createMany
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Creates a new instance in libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.createMany = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::createMany::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#destroyAll
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Deletes all libraries of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.libraries.destroyAll = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::delete::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#destroyById
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Delete a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.libraries.destroyById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::destroyById::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#findById
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Find a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.findById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::findById::School::libraries"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.libraries#updateById
             * @methodOf lbServices.School.libraries
             *
             * @description
             *
             * Update a related item by id for libraries.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for libraries
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R.libraries.updateById = function() {
          var TargetResource = $injector.get("Library");
          var action = TargetResource["::updateById::School::libraries"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.studentParents
     * @header lbServices.School.studentParents
     * @object
     * @description
     *
     * The object `School.studentParents` groups methods
     * manipulating `StudentParent` instances related to `School`.
     *
     * Call {@link lbServices.School#studentParents School.studentParents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#studentParents
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries studentParents of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::get::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#count
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Counts studentParents of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.studentParents.count = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::count::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#create
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.create = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::create::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#createMany
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Creates a new instance in studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.createMany = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::createMany::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#destroyAll
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Deletes all studentParents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyAll = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::delete::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#destroyById
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Delete a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.studentParents.destroyById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::destroyById::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#findById
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Find a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.findById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::findById::School::studentParents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.studentParents#updateById
             * @methodOf lbServices.School.studentParents
             *
             * @description
             *
             * Update a related item by id for studentParents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for studentParents
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R.studentParents.updateById = function() {
          var TargetResource = $injector.get("StudentParent");
          var action = TargetResource["::updateById::School::studentParents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.busServices
     * @header lbServices.School.busServices
     * @object
     * @description
     *
     * The object `School.busServices` groups methods
     * manipulating `BusService` instances related to `School`.
     *
     * Call {@link lbServices.School#busServices School.busServices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#busServices
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries busServices of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::get::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#count
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Counts busServices of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.busServices.count = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::count::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#create
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Creates a new instance in busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.create = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::create::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#createMany
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Creates a new instance in busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.createMany = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::createMany::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#destroyAll
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Deletes all busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busServices.destroyAll = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::delete::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#destroyById
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Delete a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busServices.destroyById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::destroyById::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#findById
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Find a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.findById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::findById::School::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.busServices#updateById
             * @methodOf lbServices.School.busServices
             *
             * @description
             *
             * Update a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.updateById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::updateById::School::busServices"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.expensePayments
     * @header lbServices.School.expensePayments
     * @object
     * @description
     *
     * The object `School.expensePayments` groups methods
     * manipulating `ExpensePayment` instances related to `School`.
     *
     * Call {@link lbServices.School#expensePayments School.expensePayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#expensePayments
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries expensePayments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::get::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#count
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Counts expensePayments of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.expensePayments.count = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::count::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#create
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Creates a new instance in expensePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments.create = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::create::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#createMany
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Creates a new instance in expensePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments.createMany = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::createMany::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#destroyAll
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Deletes all expensePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.expensePayments.destroyAll = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::delete::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#destroyById
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Delete a related item by id for expensePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for expensePayments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.expensePayments.destroyById = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::destroyById::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#findById
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Find a related item by id for expensePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for expensePayments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments.findById = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::findById::School::expensePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.expensePayments#updateById
             * @methodOf lbServices.School.expensePayments
             *
             * @description
             *
             * Update a related item by id for expensePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for expensePayments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R.expensePayments.updateById = function() {
          var TargetResource = $injector.get("ExpensePayment");
          var action = TargetResource["::updateById::School::expensePayments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.feeSetups
     * @header lbServices.School.feeSetups
     * @object
     * @description
     *
     * The object `School.feeSetups` groups methods
     * manipulating `FeeSetup` instances related to `School`.
     *
     * Call {@link lbServices.School#feeSetups School.feeSetups()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#feeSetups
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries feeSetups of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::get::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#count
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Counts feeSetups of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feeSetups.count = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::count::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#create
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Creates a new instance in feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.create = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::create::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#createMany
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Creates a new instance in feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.createMany = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::createMany::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#destroyAll
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Deletes all feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetups.destroyAll = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::delete::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#destroyById
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Delete a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetups.destroyById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::destroyById::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#findById
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Find a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.findById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::findById::School::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.feeSetups#updateById
             * @methodOf lbServices.School.feeSetups
             *
             * @description
             *
             * Update a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.updateById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::updateById::School::feeSetups"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.exams
     * @header lbServices.School.exams
     * @object
     * @description
     *
     * The object `School.exams` groups methods
     * manipulating `Exam` instances related to `School`.
     *
     * Call {@link lbServices.School#exams School.exams()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#exams
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries exams of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::get::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#count
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Counts exams of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.exams.count = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::count::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#create
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Creates a new instance in exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.create = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::create::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#createMany
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Creates a new instance in exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.createMany = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::createMany::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#destroyAll
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Deletes all exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exams.destroyAll = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::delete::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#destroyById
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Delete a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exams.destroyById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::destroyById::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#findById
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Find a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.findById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::findById::School::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.exams#updateById
             * @methodOf lbServices.School.exams
             *
             * @description
             *
             * Update a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.updateById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::updateById::School::exams"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.grades
     * @header lbServices.School.grades
     * @object
     * @description
     *
     * The object `School.grades` groups methods
     * manipulating `Grade` instances related to `School`.
     *
     * Call {@link lbServices.School#grades School.grades()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#grades
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries grades of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::get::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#count
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Counts grades of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.grades.count = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::count::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#create
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Creates a new instance in grades of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades.create = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::create::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#createMany
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Creates a new instance in grades of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades.createMany = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::createMany::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#destroyAll
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Deletes all grades of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.grades.destroyAll = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::delete::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#destroyById
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Delete a related item by id for grades.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for grades
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.grades.destroyById = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::destroyById::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#findById
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Find a related item by id for grades.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for grades
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades.findById = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::findById::School::grades"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.grades#updateById
             * @methodOf lbServices.School.grades
             *
             * @description
             *
             * Update a related item by id for grades.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for grades
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R.grades.updateById = function() {
          var TargetResource = $injector.get("Grade");
          var action = TargetResource["::updateById::School::grades"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.School.workingDays
     * @header lbServices.School.workingDays
     * @object
     * @description
     *
     * The object `School.workingDays` groups methods
     * manipulating `WorkingDay` instances related to `School`.
     *
     * Call {@link lbServices.School#workingDays School.workingDays()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.School#workingDays
             * @methodOf lbServices.School
             *
             * @description
             *
             * Queries workingDays of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::get::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#count
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Counts workingDays of School.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.workingDays.count = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::count::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#create
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Creates a new instance in workingDays of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays.create = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::create::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#createMany
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Creates a new instance in workingDays of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays.createMany = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::createMany::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#destroyAll
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Deletes all workingDays of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.workingDays.destroyAll = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::delete::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#destroyById
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Delete a related item by id for workingDays.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for workingDays
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.workingDays.destroyById = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::destroyById::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#findById
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Find a related item by id for workingDays.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for workingDays
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays.findById = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::findById::School::workingDays"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.School.workingDays#updateById
             * @methodOf lbServices.School.workingDays
             *
             * @description
             *
             * Update a related item by id for workingDays.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for workingDays
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDays.updateById = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::updateById::School::workingDays"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Class
 * @header lbServices.Class
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Class` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Class",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Classes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Class.students.findById() instead.
            "prototype$__findById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.students.destroyById() instead.
            "prototype$__destroyById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.students.updateById() instead.
            "prototype$__updateById__students": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/students/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Classes/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Class.staff() instead.
            "prototype$__get__staff": {
              url: urlBase + "/Classes/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.findById() instead.
            "prototype$__findById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.destroyById() instead.
            "prototype$__destroyById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.subjects.updateById() instead.
            "prototype$__updateById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.schedules.findById() instead.
            "prototype$__findById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules.destroyById() instead.
            "prototype$__destroyById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.schedules.updateById() instead.
            "prototype$__updateById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.assignments.findById() instead.
            "prototype$__findById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.destroyById() instead.
            "prototype$__destroyById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.assignments.updateById() instead.
            "prototype$__updateById__assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.feeSetups.findById() instead.
            "prototype$__findById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.destroyById() instead.
            "prototype$__destroyById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feeSetups.updateById() instead.
            "prototype$__updateById__feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.exams.findById() instead.
            "prototype$__findById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.destroyById() instead.
            "prototype$__destroyById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.exams.updateById() instead.
            "prototype$__updateById__exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.marks.findById() instead.
            "prototype$__findById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.destroyById() instead.
            "prototype$__destroyById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.marks.updateById() instead.
            "prototype$__updateById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.feePayments.findById() instead.
            "prototype$__findById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments.destroyById() instead.
            "prototype$__destroyById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feePayments.updateById() instead.
            "prototype$__updateById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.students() instead.
            "prototype$__get__students": {
              isArray: true,
              url: urlBase + "/Classes/:id/students",
              method: "GET",
            },

            // INTERNAL. Use Class.students.create() instead.
            "prototype$__create__students": {
              url: urlBase + "/Classes/:id/students",
              method: "POST",
            },

            // INTERNAL. Use Class.students.destroyAll() instead.
            "prototype$__delete__students": {
              url: urlBase + "/Classes/:id/students",
              method: "DELETE",
            },

            // INTERNAL. Use Class.students.count() instead.
            "prototype$__count__students": {
              url: urlBase + "/Classes/:id/students/count",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects() instead.
            "prototype$__get__subjects": {
              isArray: true,
              url: urlBase + "/Classes/:id/subjects",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.create() instead.
            "prototype$__create__subjects": {
              url: urlBase + "/Classes/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Class.subjects.destroyAll() instead.
            "prototype$__delete__subjects": {
              url: urlBase + "/Classes/:id/subjects",
              method: "DELETE",
            },

            // INTERNAL. Use Class.subjects.count() instead.
            "prototype$__count__subjects": {
              url: urlBase + "/Classes/:id/subjects/count",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules() instead.
            "prototype$__get__schedules": {
              isArray: true,
              url: urlBase + "/Classes/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules.create() instead.
            "prototype$__create__schedules": {
              url: urlBase + "/Classes/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Class.schedules.destroyAll() instead.
            "prototype$__delete__schedules": {
              url: urlBase + "/Classes/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Class.schedules.count() instead.
            "prototype$__count__schedules": {
              url: urlBase + "/Classes/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments() instead.
            "prototype$__get__assignments": {
              isArray: true,
              url: urlBase + "/Classes/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.create() instead.
            "prototype$__create__assignments": {
              url: urlBase + "/Classes/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use Class.assignments.destroyAll() instead.
            "prototype$__delete__assignments": {
              url: urlBase + "/Classes/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use Class.assignments.count() instead.
            "prototype$__count__assignments": {
              url: urlBase + "/Classes/:id/assignments/count",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups() instead.
            "prototype$__get__feeSetups": {
              isArray: true,
              url: urlBase + "/Classes/:id/feeSetups",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.create() instead.
            "prototype$__create__feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use Class.feeSetups.destroyAll() instead.
            "prototype$__delete__feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feeSetups.count() instead.
            "prototype$__count__feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups/count",
              method: "GET",
            },

            // INTERNAL. Use Class.exams() instead.
            "prototype$__get__exams": {
              isArray: true,
              url: urlBase + "/Classes/:id/exams",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.create() instead.
            "prototype$__create__exams": {
              url: urlBase + "/Classes/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use Class.exams.destroyAll() instead.
            "prototype$__delete__exams": {
              url: urlBase + "/Classes/:id/exams",
              method: "DELETE",
            },

            // INTERNAL. Use Class.exams.count() instead.
            "prototype$__count__exams": {
              url: urlBase + "/Classes/:id/exams/count",
              method: "GET",
            },

            // INTERNAL. Use Class.marks() instead.
            "prototype$__get__marks": {
              isArray: true,
              url: urlBase + "/Classes/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.create() instead.
            "prototype$__create__marks": {
              url: urlBase + "/Classes/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Class.marks.destroyAll() instead.
            "prototype$__delete__marks": {
              url: urlBase + "/Classes/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Class.marks.count() instead.
            "prototype$__count__marks": {
              url: urlBase + "/Classes/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments() instead.
            "prototype$__get__feePayments": {
              isArray: true,
              url: urlBase + "/Classes/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments.create() instead.
            "prototype$__create__feePayments": {
              url: urlBase + "/Classes/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use Class.feePayments.destroyAll() instead.
            "prototype$__delete__feePayments": {
              url: urlBase + "/Classes/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feePayments.count() instead.
            "prototype$__count__feePayments": {
              url: urlBase + "/Classes/:id/feePayments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#create
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Classes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#createMany
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Classes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#upsert
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Classes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#replaceOrCreate
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Classes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#upsertWithWhere
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Classes/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#exists
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Classes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#findById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Classes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#replaceById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Classes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#find
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Classes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#findOne
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Classes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#updateAll
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Classes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#deleteById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Classes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#count
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Classes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#prototype$updateAttributes
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Classes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Class#createChangeStream
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Classes/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.class() instead.
            "::get::Student::class": {
              url: urlBase + "/Students/:id/class",
              method: "GET",
            },

            // INTERNAL. Use School.classes.findById() instead.
            "::findById::School::classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.classes.destroyById() instead.
            "::destroyById::School::classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.classes.updateById() instead.
            "::updateById::School::classes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/classes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.classes() instead.
            "::get::School::classes": {
              isArray: true,
              url: urlBase + "/Schools/:id/classes",
              method: "GET",
            },

            // INTERNAL. Use School.classes.create() instead.
            "::create::School::classes": {
              url: urlBase + "/Schools/:id/classes",
              method: "POST",
            },

            // INTERNAL. Use School.classes.createMany() instead.
            "::createMany::School::classes": {
              isArray: true,
              url: urlBase + "/Schools/:id/classes",
              method: "POST",
            },

            // INTERNAL. Use School.classes.destroyAll() instead.
            "::delete::School::classes": {
              url: urlBase + "/Schools/:id/classes",
              method: "DELETE",
            },

            // INTERNAL. Use School.classes.count() instead.
            "::count::School::classes": {
              url: urlBase + "/Schools/:id/classes/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.class() instead.
            "::get::Subject::class": {
              url: urlBase + "/Subjects/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Schedule.class() instead.
            "::get::Schedule::class": {
              url: urlBase + "/Schedules/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Assignment.class() instead.
            "::get::Assignment::class": {
              url: urlBase + "/Assignments/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.class() instead.
            "::get::FeeSetup::class": {
              url: urlBase + "/FeeSetups/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Exam.class() instead.
            "::get::Exam::class": {
              url: urlBase + "/Exams/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Marks.class() instead.
            "::get::Marks::class": {
              url: urlBase + "/Marks/:id/class",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Class#patchOrCreate
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Class#updateOrCreate
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Class#patchOrCreateWithWhere
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Class#update
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Class#destroyById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Class#removeById
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Class#patchAttributes
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Class#modelName
        * @propertyOf lbServices.Class
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Class`.
        */
        R.modelName = "Class";

    /**
     * @ngdoc object
     * @name lbServices.Class.students
     * @header lbServices.Class.students
     * @object
     * @description
     *
     * The object `Class.students` groups methods
     * manipulating `Student` instances related to `Class`.
     *
     * Call {@link lbServices.Class#students Class.students()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#students
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries students of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#count
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Counts students of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.students.count = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::count::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#create
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.create = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::create::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#createMany
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Creates a new instance in students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.createMany = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::createMany::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#destroyAll
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Deletes all students of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyAll = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::delete::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#destroyById
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Delete a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.students.destroyById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::destroyById::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#findById
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Find a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.findById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::findById::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.students#updateById
             * @methodOf lbServices.Class.students
             *
             * @description
             *
             * Update a related item by id for students.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for students
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.students.updateById = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::updateById::Class::students"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class#school
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Class::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class#staff
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Fetches belongsTo relation staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staff = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::Class::staff"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.subjects
     * @header lbServices.Class.subjects
     * @object
     * @description
     *
     * The object `Class.subjects` groups methods
     * manipulating `Subject` instances related to `Class`.
     *
     * Call {@link lbServices.Class#subjects Class.subjects()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#subjects
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries subjects of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#count
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Counts subjects of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.subjects.count = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::count::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#create
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Creates a new instance in subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.create = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::create::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#createMany
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Creates a new instance in subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.createMany = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::createMany::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#destroyAll
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Deletes all subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subjects.destroyAll = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::delete::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#destroyById
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Delete a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subjects.destroyById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::destroyById::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#findById
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Find a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.findById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::findById::Class::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.subjects#updateById
             * @methodOf lbServices.Class.subjects
             *
             * @description
             *
             * Update a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.updateById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::updateById::Class::subjects"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.schedules
     * @header lbServices.Class.schedules
     * @object
     * @description
     *
     * The object `Class.schedules` groups methods
     * manipulating `Schedule` instances related to `Class`.
     *
     * Call {@link lbServices.Class#schedules Class.schedules()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#schedules
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries schedules of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#count
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Counts schedules of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.schedules.count = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::count::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#create
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.create = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::create::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#createMany
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.createMany = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::createMany::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#destroyAll
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Deletes all schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyAll = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::delete::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#destroyById
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Delete a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::destroyById::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#findById
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Find a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.findById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::findById::Class::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.schedules#updateById
             * @methodOf lbServices.Class.schedules
             *
             * @description
             *
             * Update a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.updateById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::updateById::Class::schedules"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.assignments
     * @header lbServices.Class.assignments
     * @object
     * @description
     *
     * The object `Class.assignments` groups methods
     * manipulating `Assignment` instances related to `Class`.
     *
     * Call {@link lbServices.Class#assignments Class.assignments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#assignments
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries assignments of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::get::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#count
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Counts assignments of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.assignments.count = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::count::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#create
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.create = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::create::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#createMany
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Creates a new instance in assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.createMany = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::createMany::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#destroyAll
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Deletes all assignments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyAll = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::delete::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#destroyById
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Delete a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assignments.destroyById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::destroyById::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#findById
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Find a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.findById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::findById::Class::assignments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.assignments#updateById
             * @methodOf lbServices.Class.assignments
             *
             * @description
             *
             * Update a related item by id for assignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for assignments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R.assignments.updateById = function() {
          var TargetResource = $injector.get("Assignment");
          var action = TargetResource["::updateById::Class::assignments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.feeSetups
     * @header lbServices.Class.feeSetups
     * @object
     * @description
     *
     * The object `Class.feeSetups` groups methods
     * manipulating `FeeSetup` instances related to `Class`.
     *
     * Call {@link lbServices.Class#feeSetups Class.feeSetups()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#feeSetups
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries feeSetups of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::get::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#count
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Counts feeSetups of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feeSetups.count = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::count::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#create
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Creates a new instance in feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.create = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::create::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#createMany
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Creates a new instance in feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.createMany = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::createMany::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#destroyAll
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Deletes all feeSetups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetups.destroyAll = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::delete::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#destroyById
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Delete a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feeSetups.destroyById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::destroyById::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#findById
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Find a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.findById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::findById::Class::feeSetups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feeSetups#updateById
             * @methodOf lbServices.Class.feeSetups
             *
             * @description
             *
             * Update a related item by id for feeSetups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feeSetups
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetups.updateById = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::updateById::Class::feeSetups"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.exams
     * @header lbServices.Class.exams
     * @object
     * @description
     *
     * The object `Class.exams` groups methods
     * manipulating `Exam` instances related to `Class`.
     *
     * Call {@link lbServices.Class#exams Class.exams()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#exams
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries exams of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::get::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#count
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Counts exams of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.exams.count = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::count::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#create
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Creates a new instance in exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.create = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::create::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#createMany
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Creates a new instance in exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.createMany = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::createMany::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#destroyAll
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Deletes all exams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exams.destroyAll = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::delete::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#destroyById
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Delete a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exams.destroyById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::destroyById::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#findById
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Find a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.findById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::findById::Class::exams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.exams#updateById
             * @methodOf lbServices.Class.exams
             *
             * @description
             *
             * Update a related item by id for exams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for exams
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exams.updateById = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::updateById::Class::exams"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.marks
     * @header lbServices.Class.marks
     * @object
     * @description
     *
     * The object `Class.marks` groups methods
     * manipulating `Marks` instances related to `Class`.
     *
     * Call {@link lbServices.Class#marks Class.marks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#marks
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries marks of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::get::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#count
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Counts marks of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.marks.count = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::count::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#create
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.create = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::create::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#createMany
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.createMany = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::createMany::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#destroyAll
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Deletes all marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyAll = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::delete::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#destroyById
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Delete a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::destroyById::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#findById
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Find a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.findById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::findById::Class::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.marks#updateById
             * @methodOf lbServices.Class.marks
             *
             * @description
             *
             * Update a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.updateById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::updateById::Class::marks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Class.feePayments
     * @header lbServices.Class.feePayments
     * @object
     * @description
     *
     * The object `Class.feePayments` groups methods
     * manipulating `FeePayment` instances related to `Class`.
     *
     * Call {@link lbServices.Class#feePayments Class.feePayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Class#feePayments
             * @methodOf lbServices.Class
             *
             * @description
             *
             * Queries feePayments of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::get::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#count
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Counts feePayments of Class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feePayments.count = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::count::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#create
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.create = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::create::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#createMany
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.createMany = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::createMany::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#destroyAll
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Deletes all feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyAll = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::delete::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#destroyById
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Delete a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::destroyById::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#findById
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Find a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.findById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::findById::Class::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Class.feePayments#updateById
             * @methodOf lbServices.Class.feePayments
             *
             * @description
             *
             * Update a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.updateById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::updateById::Class::feePayments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Admin
 * @header lbServices.Admin
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Admin` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Admin",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Admins/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__findById__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__updateById__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Admins/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__get__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Queries accessTokens of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Admins/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__create__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__delete__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__count__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Counts accessTokens of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#create
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Admins",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#createMany
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Admins",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#upsert
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Admins",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#replaceOrCreate
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Admins/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#upsertWithWhere
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Admins/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#exists
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Admins/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#findById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Admins/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#replaceById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Admins/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#find
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Admins",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#findOne
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Admins/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#updateAll
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Admins/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#deleteById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Admins/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#count
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Admins/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$updateAttributes
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Admins/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#createChangeStream
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Admins/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#login
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Admins/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#logout
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Admins/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#confirm
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Admins/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#resetPassword
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Admins/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#getCurrent
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Admins" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Admin#patchOrCreate
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#updateOrCreate
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#patchOrCreateWithWhere
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#update
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#destroyById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#removeById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#patchAttributes
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Admin#getCachedCurrent
         * @methodOf lbServices.Admin
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Admin#login} or
         * {@link lbServices.Admin#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Admin instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Admin#isAuthenticated
         * @methodOf lbServices.Admin
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Admin#getCurrentId
         * @methodOf lbServices.Admin
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Admin#modelName
        * @propertyOf lbServices.Admin
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Admin`.
        */
        R.modelName = "Admin";


            /**
             * @ngdoc method
             * @name lbServices.Admin#school
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Admin::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Subject
 * @header lbServices.Subject
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Subject` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Subject",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Subjects/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Subject.staff() instead.
            "prototype$__get__staff": {
              url: urlBase + "/Subjects/:id/staff",
              method: "GET",
            },

            // INTERNAL. Use Subject.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Subjects/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Subject.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Subjects/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedule() instead.
            "prototype$__get__schedule": {
              url: urlBase + "/Subjects/:id/schedule",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.findById() instead.
            "prototype$__findById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.destroyById() instead.
            "prototype$__destroyById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.schedules.updateById() instead.
            "prototype$__updateById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.marks.findById() instead.
            "prototype$__findById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.destroyById() instead.
            "prototype$__destroyById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.marks.updateById() instead.
            "prototype$__updateById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.maxMarks.findById() instead.
            "prototype$__findById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks.destroyById() instead.
            "prototype$__destroyById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.maxMarks.updateById() instead.
            "prototype$__updateById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.schedules() instead.
            "prototype$__get__schedules": {
              isArray: true,
              url: urlBase + "/Subjects/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.create() instead.
            "prototype$__create__schedules": {
              url: urlBase + "/Subjects/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Subject.schedules.destroyAll() instead.
            "prototype$__delete__schedules": {
              url: urlBase + "/Subjects/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.schedules.count() instead.
            "prototype$__count__schedules": {
              url: urlBase + "/Subjects/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks() instead.
            "prototype$__get__marks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.create() instead.
            "prototype$__create__marks": {
              url: urlBase + "/Subjects/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Subject.marks.destroyAll() instead.
            "prototype$__delete__marks": {
              url: urlBase + "/Subjects/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.marks.count() instead.
            "prototype$__count__marks": {
              url: urlBase + "/Subjects/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks() instead.
            "prototype$__get__maxMarks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks.create() instead.
            "prototype$__create__maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Subject.maxMarks.destroyAll() instead.
            "prototype$__delete__maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.maxMarks.count() instead.
            "prototype$__count__maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#create
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Subjects",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#createMany
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Subjects",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#upsert
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Subjects",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#replaceOrCreate
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Subjects/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#upsertWithWhere
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Subjects/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#exists
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Subjects/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#findById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Subjects/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#replaceById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Subjects/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#find
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Subjects",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#findOne
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Subjects/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#updateAll
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Subjects/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#deleteById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Subjects/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#count
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Subjects/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#prototype$updateAttributes
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Subjects/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Subject#createChangeStream
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Subjects/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Staff.subject() instead.
            "::get::Staff::subject": {
              url: urlBase + "/Staffs/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.findById() instead.
            "::findById::Class::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.destroyById() instead.
            "::destroyById::Class::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.subjects.updateById() instead.
            "::updateById::Class::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/subjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.subjects() instead.
            "::get::Class::subjects": {
              isArray: true,
              url: urlBase + "/Classes/:id/subjects",
              method: "GET",
            },

            // INTERNAL. Use Class.subjects.create() instead.
            "::create::Class::subjects": {
              url: urlBase + "/Classes/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Class.subjects.createMany() instead.
            "::createMany::Class::subjects": {
              isArray: true,
              url: urlBase + "/Classes/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Class.subjects.destroyAll() instead.
            "::delete::Class::subjects": {
              url: urlBase + "/Classes/:id/subjects",
              method: "DELETE",
            },

            // INTERNAL. Use Class.subjects.count() instead.
            "::count::Class::subjects": {
              url: urlBase + "/Classes/:id/subjects/count",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.findById() instead.
            "::findById::Schedule::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.destroyById() instead.
            "::destroyById::Schedule::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Schedule.subjects.updateById() instead.
            "::updateById::Schedule::subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Schedule.subject() instead.
            "::get::Schedule::subject": {
              url: urlBase + "/Schedules/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects() instead.
            "::get::Schedule::subjects": {
              isArray: true,
              url: urlBase + "/Schedules/:id/subjects",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.create() instead.
            "::create::Schedule::subjects": {
              url: urlBase + "/Schedules/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Schedule.subjects.createMany() instead.
            "::createMany::Schedule::subjects": {
              isArray: true,
              url: urlBase + "/Schedules/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Schedule.subjects.destroyAll() instead.
            "::delete::Schedule::subjects": {
              url: urlBase + "/Schedules/:id/subjects",
              method: "DELETE",
            },

            // INTERNAL. Use Schedule.subjects.count() instead.
            "::count::Schedule::subjects": {
              url: urlBase + "/Schedules/:id/subjects/count",
              method: "GET",
            },

            // INTERNAL. Use Marks.subject() instead.
            "::get::Marks::subject": {
              url: urlBase + "/Marks/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use MaxMark.subject() instead.
            "::get::MaxMark::subject": {
              url: urlBase + "/MaxMarks/:id/subject",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Subject#patchOrCreate
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#updateOrCreate
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#patchOrCreateWithWhere
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#update
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#destroyById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#removeById
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Subject#patchAttributes
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Subject#modelName
        * @propertyOf lbServices.Subject
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Subject`.
        */
        R.modelName = "Subject";


            /**
             * @ngdoc method
             * @name lbServices.Subject#staff
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Fetches belongsTo relation staff.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Staff` object.)
             * </em>
             */
        R.staff = function() {
          var TargetResource = $injector.get("Staff");
          var action = TargetResource["::get::Subject::staff"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject#school
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Subject::school"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject#class
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Subject::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject#schedule
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Fetches belongsTo relation schedule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedule = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::Subject::schedule"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Subject.schedules
     * @header lbServices.Subject.schedules
     * @object
     * @description
     *
     * The object `Subject.schedules` groups methods
     * manipulating `Schedule` instances related to `Subject`.
     *
     * Call {@link lbServices.Subject#schedules Subject.schedules()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Subject#schedules
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Queries schedules of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#count
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Counts schedules of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.schedules.count = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::count::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#create
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.create = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::create::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#createMany
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.createMany = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::createMany::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#destroyAll
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Deletes all schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyAll = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::delete::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#destroyById
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Delete a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::destroyById::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#findById
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Find a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.findById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::findById::Subject::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.schedules#updateById
             * @methodOf lbServices.Subject.schedules
             *
             * @description
             *
             * Update a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.updateById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::updateById::Subject::schedules"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Subject.marks
     * @header lbServices.Subject.marks
     * @object
     * @description
     *
     * The object `Subject.marks` groups methods
     * manipulating `Marks` instances related to `Subject`.
     *
     * Call {@link lbServices.Subject#marks Subject.marks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Subject#marks
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Queries marks of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::get::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#count
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Counts marks of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.marks.count = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::count::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#create
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.create = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::create::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#createMany
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.createMany = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::createMany::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#destroyAll
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Deletes all marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyAll = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::delete::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#destroyById
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Delete a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::destroyById::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#findById
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Find a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.findById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::findById::Subject::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.marks#updateById
             * @methodOf lbServices.Subject.marks
             *
             * @description
             *
             * Update a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.updateById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::updateById::Subject::marks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Subject.maxMarks
     * @header lbServices.Subject.maxMarks
     * @object
     * @description
     *
     * The object `Subject.maxMarks` groups methods
     * manipulating `MaxMark` instances related to `Subject`.
     *
     * Call {@link lbServices.Subject#maxMarks Subject.maxMarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Subject#maxMarks
             * @methodOf lbServices.Subject
             *
             * @description
             *
             * Queries maxMarks of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::get::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#count
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Counts maxMarks of Subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.maxMarks.count = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::count::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#create
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Creates a new instance in maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.create = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::create::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#createMany
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Creates a new instance in maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.createMany = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::createMany::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#destroyAll
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Deletes all maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maxMarks.destroyAll = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::delete::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#destroyById
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Delete a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maxMarks.destroyById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::destroyById::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#findById
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Find a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.findById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::findById::Subject::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Subject.maxMarks#updateById
             * @methodOf lbServices.Subject.maxMarks
             *
             * @description
             *
             * Update a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.updateById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::updateById::Subject::maxMarks"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Bus
 * @header lbServices.Bus
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Bus` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Bus",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Buses/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Bus.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Buses/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.findById() instead.
            "prototype$__findById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.destroyById() instead.
            "prototype$__destroyById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bus.busServices.updateById() instead.
            "prototype$__updateById__busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bus.busServices() instead.
            "prototype$__get__busServices": {
              isArray: true,
              url: urlBase + "/Buses/:id/busServices",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.create() instead.
            "prototype$__create__busServices": {
              url: urlBase + "/Buses/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use Bus.busServices.destroyAll() instead.
            "prototype$__delete__busServices": {
              url: urlBase + "/Buses/:id/busServices",
              method: "DELETE",
            },

            // INTERNAL. Use Bus.busServices.count() instead.
            "prototype$__count__busServices": {
              url: urlBase + "/Buses/:id/busServices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#create
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Buses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#createMany
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Buses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#upsert
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Buses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#replaceOrCreate
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Buses/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#upsertWithWhere
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Buses/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#exists
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Buses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#findById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Buses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#replaceById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Buses/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#find
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Buses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#findOne
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Buses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#updateAll
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Buses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#deleteById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Buses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#count
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Buses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#prototype$updateAttributes
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Buses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bus#createChangeStream
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Buses/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.bus.findById() instead.
            "::findById::School::bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.bus.destroyById() instead.
            "::destroyById::School::bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.bus.updateById() instead.
            "::updateById::School::bus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/bus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.buses.findById() instead.
            "::findById::School::buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.buses.destroyById() instead.
            "::destroyById::School::buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.buses.updateById() instead.
            "::updateById::School::buses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/buses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.bus() instead.
            "::get::School::bus": {
              isArray: true,
              url: urlBase + "/Schools/:id/bus",
              method: "GET",
            },

            // INTERNAL. Use School.bus.create() instead.
            "::create::School::bus": {
              url: urlBase + "/Schools/:id/bus",
              method: "POST",
            },

            // INTERNAL. Use School.bus.createMany() instead.
            "::createMany::School::bus": {
              isArray: true,
              url: urlBase + "/Schools/:id/bus",
              method: "POST",
            },

            // INTERNAL. Use School.bus.destroyAll() instead.
            "::delete::School::bus": {
              url: urlBase + "/Schools/:id/bus",
              method: "DELETE",
            },

            // INTERNAL. Use School.bus.count() instead.
            "::count::School::bus": {
              url: urlBase + "/Schools/:id/bus/count",
              method: "GET",
            },

            // INTERNAL. Use School.buses() instead.
            "::get::School::buses": {
              isArray: true,
              url: urlBase + "/Schools/:id/buses",
              method: "GET",
            },

            // INTERNAL. Use School.buses.create() instead.
            "::create::School::buses": {
              url: urlBase + "/Schools/:id/buses",
              method: "POST",
            },

            // INTERNAL. Use School.buses.createMany() instead.
            "::createMany::School::buses": {
              isArray: true,
              url: urlBase + "/Schools/:id/buses",
              method: "POST",
            },

            // INTERNAL. Use School.buses.destroyAll() instead.
            "::delete::School::buses": {
              url: urlBase + "/Schools/:id/buses",
              method: "DELETE",
            },

            // INTERNAL. Use School.buses.count() instead.
            "::count::School::buses": {
              url: urlBase + "/Schools/:id/buses/count",
              method: "GET",
            },

            // INTERNAL. Use BusService.bus() instead.
            "::get::BusService::bus": {
              url: urlBase + "/BusServices/:id/bus",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Bus#patchOrCreate
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#updateOrCreate
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#patchOrCreateWithWhere
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#update
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#destroyById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#removeById
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Bus#patchAttributes
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Bus#modelName
        * @propertyOf lbServices.Bus
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Bus`.
        */
        R.modelName = "Bus";


            /**
             * @ngdoc method
             * @name lbServices.Bus#school
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Bus::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Bus.busServices
     * @header lbServices.Bus.busServices
     * @object
     * @description
     *
     * The object `Bus.busServices` groups methods
     * manipulating `BusService` instances related to `Bus`.
     *
     * Call {@link lbServices.Bus#busServices Bus.busServices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bus#busServices
             * @methodOf lbServices.Bus
             *
             * @description
             *
             * Queries busServices of Bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::get::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#count
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Counts busServices of Bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.busServices.count = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::count::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#create
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Creates a new instance in busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.create = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::create::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#createMany
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Creates a new instance in busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.createMany = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::createMany::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#destroyAll
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Deletes all busServices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busServices.destroyAll = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::delete::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#destroyById
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Delete a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.busServices.destroyById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::destroyById::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#findById
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Find a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.findById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::findById::Bus::busServices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bus.busServices#updateById
             * @methodOf lbServices.Bus.busServices
             *
             * @description
             *
             * Update a related item by id for busServices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for busServices
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busServices.updateById = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::updateById::Bus::busServices"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Timetable
 * @header lbServices.Timetable
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Timetable` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Timetable",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Timetables/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Timetable.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Timetables/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.findById() instead.
            "prototype$__findById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.destroyById() instead.
            "prototype$__destroyById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Timetable.schedules.updateById() instead.
            "prototype$__updateById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Timetable.schedules() instead.
            "prototype$__get__schedules": {
              isArray: true,
              url: urlBase + "/Timetables/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.create() instead.
            "prototype$__create__schedules": {
              url: urlBase + "/Timetables/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Timetable.schedules.destroyAll() instead.
            "prototype$__delete__schedules": {
              url: urlBase + "/Timetables/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Timetable.schedules.count() instead.
            "prototype$__count__schedules": {
              url: urlBase + "/Timetables/:id/schedules/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#create
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Timetables",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#createMany
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Timetables",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#upsert
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Timetables",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#replaceOrCreate
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Timetables/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#upsertWithWhere
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Timetables/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#exists
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Timetables/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#findById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Timetables/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#replaceById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Timetables/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#find
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Timetables",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#findOne
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Timetables/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#updateAll
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Timetables/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#deleteById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Timetables/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#count
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Timetables/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#prototype$updateAttributes
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Timetables/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Timetable#createChangeStream
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Timetables/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.timetables.findById() instead.
            "::findById::School::timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.timetables.destroyById() instead.
            "::destroyById::School::timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.timetables.updateById() instead.
            "::updateById::School::timetables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/timetables/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.timetables() instead.
            "::get::School::timetables": {
              isArray: true,
              url: urlBase + "/Schools/:id/timetables",
              method: "GET",
            },

            // INTERNAL. Use School.timetables.create() instead.
            "::create::School::timetables": {
              url: urlBase + "/Schools/:id/timetables",
              method: "POST",
            },

            // INTERNAL. Use School.timetables.createMany() instead.
            "::createMany::School::timetables": {
              isArray: true,
              url: urlBase + "/Schools/:id/timetables",
              method: "POST",
            },

            // INTERNAL. Use School.timetables.destroyAll() instead.
            "::delete::School::timetables": {
              url: urlBase + "/Schools/:id/timetables",
              method: "DELETE",
            },

            // INTERNAL. Use School.timetables.count() instead.
            "::count::School::timetables": {
              url: urlBase + "/Schools/:id/timetables/count",
              method: "GET",
            },

            // INTERNAL. Use Schedule.timetable() instead.
            "::get::Schedule::timetable": {
              url: urlBase + "/Schedules/:id/timetable",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Timetable#patchOrCreate
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#updateOrCreate
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#patchOrCreateWithWhere
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#update
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#destroyById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#removeById
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Timetable#patchAttributes
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Timetable#modelName
        * @propertyOf lbServices.Timetable
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Timetable`.
        */
        R.modelName = "Timetable";


            /**
             * @ngdoc method
             * @name lbServices.Timetable#school
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Timetable::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Timetable.schedules
     * @header lbServices.Timetable.schedules
     * @object
     * @description
     *
     * The object `Timetable.schedules` groups methods
     * manipulating `Schedule` instances related to `Timetable`.
     *
     * Call {@link lbServices.Timetable#schedules Timetable.schedules()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Timetable#schedules
             * @methodOf lbServices.Timetable
             *
             * @description
             *
             * Queries schedules of Timetable.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#count
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Counts schedules of Timetable.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.schedules.count = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::count::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#create
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.create = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::create::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#createMany
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.createMany = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::createMany::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#destroyAll
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Deletes all schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyAll = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::delete::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#destroyById
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Delete a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::destroyById::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#findById
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Find a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.findById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::findById::Timetable::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Timetable.schedules#updateById
             * @methodOf lbServices.Timetable.schedules
             *
             * @description
             *
             * Update a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.updateById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::updateById::Timetable::schedules"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Schedule
 * @header lbServices.Schedule
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Schedule` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Schedule",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Schedules/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Schedule.timetable() instead.
            "prototype$__get__timetable": {
              url: urlBase + "/Schedules/:id/timetable",
              method: "GET",
            },

            // INTERNAL. Use Schedule.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Schedules/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.findById() instead.
            "prototype$__findById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.destroyById() instead.
            "prototype$__destroyById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Schedule.subjects.updateById() instead.
            "prototype$__updateById__subjects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schedules/:id/subjects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Schedule.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/Schedules/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Schedule.workingDay() instead.
            "prototype$__get__workingDay": {
              url: urlBase + "/Schedules/:id/workingDay",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects() instead.
            "prototype$__get__subjects": {
              isArray: true,
              url: urlBase + "/Schedules/:id/subjects",
              method: "GET",
            },

            // INTERNAL. Use Schedule.subjects.create() instead.
            "prototype$__create__subjects": {
              url: urlBase + "/Schedules/:id/subjects",
              method: "POST",
            },

            // INTERNAL. Use Schedule.subjects.destroyAll() instead.
            "prototype$__delete__subjects": {
              url: urlBase + "/Schedules/:id/subjects",
              method: "DELETE",
            },

            // INTERNAL. Use Schedule.subjects.count() instead.
            "prototype$__count__subjects": {
              url: urlBase + "/Schedules/:id/subjects/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#create
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Schedules",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#createMany
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Schedules",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#upsert
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Schedules",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#replaceOrCreate
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Schedules/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#upsertWithWhere
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Schedules/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#exists
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Schedules/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#findById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Schedules/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#replaceById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Schedules/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#find
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Schedules",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#findOne
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Schedules/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#updateAll
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Schedules/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#deleteById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Schedules/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#count
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Schedules/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#prototype$updateAttributes
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Schedules/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Schedule#createChangeStream
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Schedules/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Class.schedules.findById() instead.
            "::findById::Class::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules.destroyById() instead.
            "::destroyById::Class::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.schedules.updateById() instead.
            "::updateById::Class::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.schedules() instead.
            "::get::Class::schedules": {
              isArray: true,
              url: urlBase + "/Classes/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Class.schedules.create() instead.
            "::create::Class::schedules": {
              url: urlBase + "/Classes/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Class.schedules.createMany() instead.
            "::createMany::Class::schedules": {
              isArray: true,
              url: urlBase + "/Classes/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Class.schedules.destroyAll() instead.
            "::delete::Class::schedules": {
              url: urlBase + "/Classes/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Class.schedules.count() instead.
            "::count::Class::schedules": {
              url: urlBase + "/Classes/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedule() instead.
            "::get::Subject::schedule": {
              url: urlBase + "/Subjects/:id/schedule",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.findById() instead.
            "::findById::Subject::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.destroyById() instead.
            "::destroyById::Subject::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.schedules.updateById() instead.
            "::updateById::Subject::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.schedules() instead.
            "::get::Subject::schedules": {
              isArray: true,
              url: urlBase + "/Subjects/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Subject.schedules.create() instead.
            "::create::Subject::schedules": {
              url: urlBase + "/Subjects/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Subject.schedules.createMany() instead.
            "::createMany::Subject::schedules": {
              isArray: true,
              url: urlBase + "/Subjects/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Subject.schedules.destroyAll() instead.
            "::delete::Subject::schedules": {
              url: urlBase + "/Subjects/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.schedules.count() instead.
            "::count::Subject::schedules": {
              url: urlBase + "/Subjects/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.findById() instead.
            "::findById::Timetable::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.destroyById() instead.
            "::destroyById::Timetable::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Timetable.schedules.updateById() instead.
            "::updateById::Timetable::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Timetables/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Timetable.schedules() instead.
            "::get::Timetable::schedules": {
              isArray: true,
              url: urlBase + "/Timetables/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use Timetable.schedules.create() instead.
            "::create::Timetable::schedules": {
              url: urlBase + "/Timetables/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Timetable.schedules.createMany() instead.
            "::createMany::Timetable::schedules": {
              isArray: true,
              url: urlBase + "/Timetables/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use Timetable.schedules.destroyAll() instead.
            "::delete::Timetable::schedules": {
              url: urlBase + "/Timetables/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use Timetable.schedules.count() instead.
            "::count::Timetable::schedules": {
              url: urlBase + "/Timetables/:id/schedules/count",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.findById() instead.
            "::findById::WorkingDay::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.destroyById() instead.
            "::destroyById::WorkingDay::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use WorkingDay.schedules.updateById() instead.
            "::updateById::WorkingDay::schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use WorkingDay.schedules() instead.
            "::get::WorkingDay::schedules": {
              isArray: true,
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.create() instead.
            "::create::WorkingDay::schedules": {
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use WorkingDay.schedules.createMany() instead.
            "::createMany::WorkingDay::schedules": {
              isArray: true,
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use WorkingDay.schedules.destroyAll() instead.
            "::delete::WorkingDay::schedules": {
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use WorkingDay.schedules.count() instead.
            "::count::WorkingDay::schedules": {
              url: urlBase + "/WorkingDays/:id/schedules/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Schedule#patchOrCreate
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#updateOrCreate
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#patchOrCreateWithWhere
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#update
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#destroyById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#removeById
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Schedule#patchAttributes
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Schedule#modelName
        * @propertyOf lbServices.Schedule
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Schedule`.
        */
        R.modelName = "Schedule";


            /**
             * @ngdoc method
             * @name lbServices.Schedule#timetable
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Fetches belongsTo relation timetable.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Timetable` object.)
             * </em>
             */
        R.timetable = function() {
          var TargetResource = $injector.get("Timetable");
          var action = TargetResource["::get::Schedule::timetable"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule#class
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Schedule::class"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Schedule.subjects
     * @header lbServices.Schedule.subjects
     * @object
     * @description
     *
     * The object `Schedule.subjects` groups methods
     * manipulating `Subject` instances related to `Schedule`.
     *
     * Call {@link lbServices.Schedule#subjects Schedule.subjects()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Schedule#subjects
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Queries subjects of Schedule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#count
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Counts subjects of Schedule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.subjects.count = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::count::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#create
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Creates a new instance in subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.create = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::create::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#createMany
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Creates a new instance in subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.createMany = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::createMany::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#destroyAll
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Deletes all subjects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subjects.destroyAll = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::delete::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#destroyById
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Delete a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subjects.destroyById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::destroyById::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#findById
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Find a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.findById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::findById::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule.subjects#updateById
             * @methodOf lbServices.Schedule.subjects
             *
             * @description
             *
             * Update a related item by id for subjects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for subjects
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subjects.updateById = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::updateById::Schedule::subjects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule#subject
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Schedule::subject"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Schedule#workingDay
             * @methodOf lbServices.Schedule
             *
             * @description
             *
             * Fetches belongsTo relation workingDay.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R.workingDay = function() {
          var TargetResource = $injector.get("WorkingDay");
          var action = TargetResource["::get::Schedule::workingDay"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Calendar
 * @header lbServices.Calendar
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Calendar` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Calendar",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Calendars/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Calendar#create
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Calendars",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#createMany
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Calendars",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#upsert
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Calendars",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#replaceOrCreate
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Calendars/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#upsertWithWhere
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Calendars/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#exists
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Calendars/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#findById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Calendars/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#replaceById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Calendars/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#find
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Calendars",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#findOne
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Calendars/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#updateAll
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Calendars/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#deleteById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Calendars/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#count
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Calendars/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#prototype$updateAttributes
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Calendars/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Calendar#createChangeStream
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Calendars/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.calendars() instead.
            "::get::School::calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "GET",
            },

            // INTERNAL. Use School.calendars.create() instead.
            "::create::School::calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "POST",
            },

            // INTERNAL. Use School.calendars.createMany() instead.
            "::createMany::School::calendars": {
              isArray: true,
              url: urlBase + "/Schools/:id/calendars",
              method: "POST",
            },

            // INTERNAL. Use School.calendars.update() instead.
            "::update::School::calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "PUT",
            },

            // INTERNAL. Use School.calendars.destroy() instead.
            "::destroy::School::calendars": {
              url: urlBase + "/Schools/:id/calendars",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Calendar#patchOrCreate
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#updateOrCreate
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#patchOrCreateWithWhere
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#update
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#destroyById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#removeById
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Calendar#patchAttributes
             * @methodOf lbServices.Calendar
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Calendar` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Calendar#modelName
        * @propertyOf lbServices.Calendar
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Calendar`.
        */
        R.modelName = "Calendar";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Noticeboard
 * @header lbServices.Noticeboard
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Noticeboard` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Noticeboard",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Noticeboards/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Noticeboard.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Noticeboards/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#create
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Noticeboards",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#createMany
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Noticeboards",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#upsert
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Noticeboards",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#replaceOrCreate
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Noticeboards/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#upsertWithWhere
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Noticeboards/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#exists
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Noticeboards/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#findById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Noticeboards/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#replaceById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Noticeboards/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#find
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Noticeboards",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#findOne
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Noticeboards/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#updateAll
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Noticeboards/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#deleteById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Noticeboards/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#count
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Noticeboards/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#prototype$updateAttributes
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Noticeboards/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#createChangeStream
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Noticeboards/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.noticeboards.findById() instead.
            "::findById::School::noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards.destroyById() instead.
            "::destroyById::School::noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.updateById() instead.
            "::updateById::School::noticeboards": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/noticeboards/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.noticeboards() instead.
            "::get::School::noticeboards": {
              isArray: true,
              url: urlBase + "/Schools/:id/noticeboards",
              method: "GET",
            },

            // INTERNAL. Use School.noticeboards.create() instead.
            "::create::School::noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards",
              method: "POST",
            },

            // INTERNAL. Use School.noticeboards.createMany() instead.
            "::createMany::School::noticeboards": {
              isArray: true,
              url: urlBase + "/Schools/:id/noticeboards",
              method: "POST",
            },

            // INTERNAL. Use School.noticeboards.destroyAll() instead.
            "::delete::School::noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards",
              method: "DELETE",
            },

            // INTERNAL. Use School.noticeboards.count() instead.
            "::count::School::noticeboards": {
              url: urlBase + "/Schools/:id/noticeboards/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#patchOrCreate
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#updateOrCreate
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#patchOrCreateWithWhere
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#update
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#destroyById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#removeById
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#patchAttributes
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Noticeboard` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Noticeboard#modelName
        * @propertyOf lbServices.Noticeboard
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Noticeboard`.
        */
        R.modelName = "Noticeboard";


            /**
             * @ngdoc method
             * @name lbServices.Noticeboard#school
             * @methodOf lbServices.Noticeboard
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Noticeboard::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Assignment
 * @header lbServices.Assignment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Assignment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Assignment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Assignments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Assignment.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Assignments/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Assignment.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Assignments/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#create
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Assignments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#createMany
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Assignments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#upsert
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Assignments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#replaceOrCreate
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Assignments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#upsertWithWhere
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Assignments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#exists
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Assignments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#findById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Assignments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#replaceById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Assignments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#find
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Assignments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#findOne
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Assignments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#updateAll
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Assignments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#deleteById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Assignments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#count
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Assignments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#prototype$updateAttributes
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Assignments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assignment#createChangeStream
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Assignments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.assignments.findById() instead.
            "::findById::School::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.assignments.destroyById() instead.
            "::destroyById::School::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.assignments.updateById() instead.
            "::updateById::School::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.assignments() instead.
            "::get::School::assignments": {
              isArray: true,
              url: urlBase + "/Schools/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use School.assignments.create() instead.
            "::create::School::assignments": {
              url: urlBase + "/Schools/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use School.assignments.createMany() instead.
            "::createMany::School::assignments": {
              isArray: true,
              url: urlBase + "/Schools/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use School.assignments.destroyAll() instead.
            "::delete::School::assignments": {
              url: urlBase + "/Schools/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use School.assignments.count() instead.
            "::count::School::assignments": {
              url: urlBase + "/Schools/:id/assignments/count",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.findById() instead.
            "::findById::Class::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.destroyById() instead.
            "::destroyById::Class::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.assignments.updateById() instead.
            "::updateById::Class::assignments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/assignments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.assignments() instead.
            "::get::Class::assignments": {
              isArray: true,
              url: urlBase + "/Classes/:id/assignments",
              method: "GET",
            },

            // INTERNAL. Use Class.assignments.create() instead.
            "::create::Class::assignments": {
              url: urlBase + "/Classes/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use Class.assignments.createMany() instead.
            "::createMany::Class::assignments": {
              isArray: true,
              url: urlBase + "/Classes/:id/assignments",
              method: "POST",
            },

            // INTERNAL. Use Class.assignments.destroyAll() instead.
            "::delete::Class::assignments": {
              url: urlBase + "/Classes/:id/assignments",
              method: "DELETE",
            },

            // INTERNAL. Use Class.assignments.count() instead.
            "::count::Class::assignments": {
              url: urlBase + "/Classes/:id/assignments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Assignment#patchOrCreate
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#updateOrCreate
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#patchOrCreateWithWhere
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#update
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#destroyById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#removeById
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Assignment#patchAttributes
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assignment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Assignment#modelName
        * @propertyOf lbServices.Assignment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Assignment`.
        */
        R.modelName = "Assignment";


            /**
             * @ngdoc method
             * @name lbServices.Assignment#class
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Assignment::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Assignment#school
             * @methodOf lbServices.Assignment
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Assignment::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Library
 * @header lbServices.Library
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Library` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Library",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Libraries/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Library.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Libraries/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#create
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Libraries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#createMany
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Libraries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#upsert
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Libraries",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#replaceOrCreate
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Libraries/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#upsertWithWhere
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Libraries/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#exists
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Libraries/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#findById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Libraries/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#replaceById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Libraries/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#find
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Libraries",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#findOne
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Libraries/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#updateAll
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Libraries/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#deleteById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Libraries/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#count
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Libraries/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#prototype$updateAttributes
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Libraries/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Library#createChangeStream
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Libraries/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.libraries.findById() instead.
            "::findById::School::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.libraries.destroyById() instead.
            "::destroyById::School::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.libraries.updateById() instead.
            "::updateById::School::libraries": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/libraries/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.libraries() instead.
            "::get::School::libraries": {
              isArray: true,
              url: urlBase + "/Schools/:id/libraries",
              method: "GET",
            },

            // INTERNAL. Use School.libraries.create() instead.
            "::create::School::libraries": {
              url: urlBase + "/Schools/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use School.libraries.createMany() instead.
            "::createMany::School::libraries": {
              isArray: true,
              url: urlBase + "/Schools/:id/libraries",
              method: "POST",
            },

            // INTERNAL. Use School.libraries.destroyAll() instead.
            "::delete::School::libraries": {
              url: urlBase + "/Schools/:id/libraries",
              method: "DELETE",
            },

            // INTERNAL. Use School.libraries.count() instead.
            "::count::School::libraries": {
              url: urlBase + "/Schools/:id/libraries/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Library#patchOrCreate
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Library#updateOrCreate
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Library#patchOrCreateWithWhere
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Library#update
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Library#destroyById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Library#removeById
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Library#patchAttributes
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Library` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Library#modelName
        * @propertyOf lbServices.Library
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Library`.
        */
        R.modelName = "Library";


            /**
             * @ngdoc method
             * @name lbServices.Library#school
             * @methodOf lbServices.Library
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Library::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.StudentParent
 * @header lbServices.StudentParent
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `StudentParent` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "StudentParent",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/StudentParents/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use StudentParent.parent() instead.
            "prototype$__get__parent": {
              url: urlBase + "/StudentParents/:id/parent",
              method: "GET",
            },

            // INTERNAL. Use StudentParent.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/StudentParents/:id/student",
              method: "GET",
            },

            // INTERNAL. Use StudentParent.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/StudentParents/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#create
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/StudentParents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#createMany
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/StudentParents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#upsert
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/StudentParents",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#replaceOrCreate
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/StudentParents/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#upsertWithWhere
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/StudentParents/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#exists
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/StudentParents/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#findById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/StudentParents/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#replaceById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/StudentParents/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#find
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/StudentParents",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#findOne
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/StudentParents/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#updateAll
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/StudentParents/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#deleteById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/StudentParents/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#count
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/StudentParents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#prototype$updateAttributes
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/StudentParents/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#createChangeStream
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/StudentParents/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.studentParents.findById() instead.
            "::findById::Student::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents.destroyById() instead.
            "::destroyById::Student::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentParents.updateById() instead.
            "::updateById::Student::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.studentParents() instead.
            "::get::Student::studentParents": {
              isArray: true,
              url: urlBase + "/Students/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use Student.studentParents.create() instead.
            "::create::Student::studentParents": {
              url: urlBase + "/Students/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Student.studentParents.createMany() instead.
            "::createMany::Student::studentParents": {
              isArray: true,
              url: urlBase + "/Students/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Student.studentParents.destroyAll() instead.
            "::delete::Student::studentParents": {
              url: urlBase + "/Students/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use Student.studentParents.count() instead.
            "::count::Student::studentParents": {
              url: urlBase + "/Students/:id/studentParents/count",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.findById() instead.
            "::findById::Parent::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.destroyById() instead.
            "::destroyById::Parent::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Parent.studentParents.updateById() instead.
            "::updateById::Parent::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Parents/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Parent.studentParents() instead.
            "::get::Parent::studentParents": {
              isArray: true,
              url: urlBase + "/Parents/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use Parent.studentParents.create() instead.
            "::create::Parent::studentParents": {
              url: urlBase + "/Parents/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Parent.studentParents.createMany() instead.
            "::createMany::Parent::studentParents": {
              isArray: true,
              url: urlBase + "/Parents/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use Parent.studentParents.destroyAll() instead.
            "::delete::Parent::studentParents": {
              url: urlBase + "/Parents/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use Parent.studentParents.count() instead.
            "::count::Parent::studentParents": {
              url: urlBase + "/Parents/:id/studentParents/count",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.findById() instead.
            "::findById::School::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.destroyById() instead.
            "::destroyById::School::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.studentParents.updateById() instead.
            "::updateById::School::studentParents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/studentParents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.studentParents() instead.
            "::get::School::studentParents": {
              isArray: true,
              url: urlBase + "/Schools/:id/studentParents",
              method: "GET",
            },

            // INTERNAL. Use School.studentParents.create() instead.
            "::create::School::studentParents": {
              url: urlBase + "/Schools/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use School.studentParents.createMany() instead.
            "::createMany::School::studentParents": {
              isArray: true,
              url: urlBase + "/Schools/:id/studentParents",
              method: "POST",
            },

            // INTERNAL. Use School.studentParents.destroyAll() instead.
            "::delete::School::studentParents": {
              url: urlBase + "/Schools/:id/studentParents",
              method: "DELETE",
            },

            // INTERNAL. Use School.studentParents.count() instead.
            "::count::School::studentParents": {
              url: urlBase + "/Schools/:id/studentParents/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.StudentParent#patchOrCreate
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#updateOrCreate
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#patchOrCreateWithWhere
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#update
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#destroyById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#removeById
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#patchAttributes
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StudentParent` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.StudentParent#modelName
        * @propertyOf lbServices.StudentParent
        * @description
        * The name of the model represented by this $resource,
        * i.e. `StudentParent`.
        */
        R.modelName = "StudentParent";


            /**
             * @ngdoc method
             * @name lbServices.StudentParent#parent
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Fetches belongsTo relation parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Parent` object.)
             * </em>
             */
        R.parent = function() {
          var TargetResource = $injector.get("Parent");
          var action = TargetResource["::get::StudentParent::parent"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#student
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::StudentParent::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StudentParent#school
             * @methodOf lbServices.StudentParent
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::StudentParent::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Attendance
 * @header lbServices.Attendance
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Attendance` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Attendance",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Attendances/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Attendance.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Attendances/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#create
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Attendances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#createMany
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Attendances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#upsert
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Attendances",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#replaceOrCreate
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Attendances/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#upsertWithWhere
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Attendances/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#exists
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Attendances/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#findById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Attendances/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#replaceById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Attendances/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#find
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Attendances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#findOne
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Attendances/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#updateAll
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Attendances/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#deleteById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Attendances/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#count
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Attendances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#prototype$updateAttributes
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Attendances/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Attendance#createChangeStream
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Attendances/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Attendance#patchOrCreate
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#updateOrCreate
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#patchOrCreateWithWhere
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#update
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#destroyById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#removeById
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Attendance#patchAttributes
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Attendance` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Attendance#modelName
        * @propertyOf lbServices.Attendance
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Attendance`.
        */
        R.modelName = "Attendance";


            /**
             * @ngdoc method
             * @name lbServices.Attendance#school
             * @methodOf lbServices.Attendance
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Attendance::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BusService
 * @header lbServices.BusService
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BusService` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BusService",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/BusServices/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use BusService.bus() instead.
            "prototype$__get__bus": {
              url: urlBase + "/BusServices/:id/bus",
              method: "GET",
            },

            // INTERNAL. Use BusService.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/BusServices/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#create
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BusServices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#createMany
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BusServices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#upsert
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/BusServices",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#replaceOrCreate
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/BusServices/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#upsertWithWhere
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/BusServices/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#exists
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BusServices/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#findById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BusServices/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#replaceById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/BusServices/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#find
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BusServices",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#findOne
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BusServices/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#updateAll
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/BusServices/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#deleteById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BusServices/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#count
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BusServices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#prototype$updateAttributes
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/BusServices/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusService#createChangeStream
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BusServices/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.busServices.findById() instead.
            "::findById::School::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.busServices.destroyById() instead.
            "::destroyById::School::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.busServices.updateById() instead.
            "::updateById::School::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/busServices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.busServices() instead.
            "::get::School::busServices": {
              isArray: true,
              url: urlBase + "/Schools/:id/busServices",
              method: "GET",
            },

            // INTERNAL. Use School.busServices.create() instead.
            "::create::School::busServices": {
              url: urlBase + "/Schools/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use School.busServices.createMany() instead.
            "::createMany::School::busServices": {
              isArray: true,
              url: urlBase + "/Schools/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use School.busServices.destroyAll() instead.
            "::delete::School::busServices": {
              url: urlBase + "/Schools/:id/busServices",
              method: "DELETE",
            },

            // INTERNAL. Use School.busServices.count() instead.
            "::count::School::busServices": {
              url: urlBase + "/Schools/:id/busServices/count",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.findById() instead.
            "::findById::Bus::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.destroyById() instead.
            "::destroyById::Bus::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bus.busServices.updateById() instead.
            "::updateById::Bus::busServices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Buses/:id/busServices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bus.busServices() instead.
            "::get::Bus::busServices": {
              isArray: true,
              url: urlBase + "/Buses/:id/busServices",
              method: "GET",
            },

            // INTERNAL. Use Bus.busServices.create() instead.
            "::create::Bus::busServices": {
              url: urlBase + "/Buses/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use Bus.busServices.createMany() instead.
            "::createMany::Bus::busServices": {
              isArray: true,
              url: urlBase + "/Buses/:id/busServices",
              method: "POST",
            },

            // INTERNAL. Use Bus.busServices.destroyAll() instead.
            "::delete::Bus::busServices": {
              url: urlBase + "/Buses/:id/busServices",
              method: "DELETE",
            },

            // INTERNAL. Use Bus.busServices.count() instead.
            "::count::Bus::busServices": {
              url: urlBase + "/Buses/:id/busServices/count",
              method: "GET",
            },

            // INTERNAL. Use BusSubscription.busService() instead.
            "::get::BusSubscription::busService": {
              url: urlBase + "/BusSubscriptions/:id/busService",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BusService#patchOrCreate
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#updateOrCreate
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#patchOrCreateWithWhere
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#update
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#destroyById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#removeById
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BusService#patchAttributes
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.BusService#modelName
        * @propertyOf lbServices.BusService
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BusService`.
        */
        R.modelName = "BusService";


            /**
             * @ngdoc method
             * @name lbServices.BusService#bus
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Fetches belongsTo relation bus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bus` object.)
             * </em>
             */
        R.bus = function() {
          var TargetResource = $injector.get("Bus");
          var action = TargetResource["::get::BusService::bus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BusService#school
             * @methodOf lbServices.BusService
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::BusService::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ExpensePayment
 * @header lbServices.ExpensePayment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ExpensePayment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ExpensePayment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ExpensePayments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ExpensePayment.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/ExpensePayments/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#create
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ExpensePayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#createMany
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ExpensePayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#upsert
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ExpensePayments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#replaceOrCreate
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ExpensePayments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#upsertWithWhere
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ExpensePayments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#exists
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ExpensePayments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#findById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ExpensePayments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#replaceById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ExpensePayments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#find
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ExpensePayments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#findOne
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ExpensePayments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#updateAll
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ExpensePayments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#deleteById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ExpensePayments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#count
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ExpensePayments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#prototype$updateAttributes
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ExpensePayments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#createChangeStream
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ExpensePayments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.expensePayments.findById() instead.
            "::findById::School::expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments.destroyById() instead.
            "::destroyById::School::expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.expensePayments.updateById() instead.
            "::updateById::School::expensePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/expensePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.expensePayments() instead.
            "::get::School::expensePayments": {
              isArray: true,
              url: urlBase + "/Schools/:id/expensePayments",
              method: "GET",
            },

            // INTERNAL. Use School.expensePayments.create() instead.
            "::create::School::expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments",
              method: "POST",
            },

            // INTERNAL. Use School.expensePayments.createMany() instead.
            "::createMany::School::expensePayments": {
              isArray: true,
              url: urlBase + "/Schools/:id/expensePayments",
              method: "POST",
            },

            // INTERNAL. Use School.expensePayments.destroyAll() instead.
            "::delete::School::expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments",
              method: "DELETE",
            },

            // INTERNAL. Use School.expensePayments.count() instead.
            "::count::School::expensePayments": {
              url: urlBase + "/Schools/:id/expensePayments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#patchOrCreate
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#updateOrCreate
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#patchOrCreateWithWhere
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#update
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#destroyById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#removeById
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#patchAttributes
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExpensePayment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ExpensePayment#modelName
        * @propertyOf lbServices.ExpensePayment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ExpensePayment`.
        */
        R.modelName = "ExpensePayment";


            /**
             * @ngdoc method
             * @name lbServices.ExpensePayment#school
             * @methodOf lbServices.ExpensePayment
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::ExpensePayment::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FeeSetup
 * @header lbServices.FeeSetup
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FeeSetup` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FeeSetup",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FeeSetups/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FeeSetup.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/FeeSetups/:id/class",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/FeeSetups/:id/school",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.findById() instead.
            "prototype$__findById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.destroyById() instead.
            "prototype$__destroyById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feePayments.updateById() instead.
            "prototype$__updateById__feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeeSetup.feePayments() instead.
            "prototype$__get__feePayments": {
              isArray: true,
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.create() instead.
            "prototype$__create__feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feePayments.destroyAll() instead.
            "prototype$__delete__feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feePayments.count() instead.
            "prototype$__count__feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#create
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FeeSetups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#createMany
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FeeSetups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#upsert
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/FeeSetups",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#replaceOrCreate
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FeeSetups/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#upsertWithWhere
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FeeSetups/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#exists
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FeeSetups/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#findById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FeeSetups/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#replaceById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FeeSetups/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#find
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FeeSetups",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#findOne
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FeeSetups/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#updateAll
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FeeSetups/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#deleteById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FeeSetups/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#count
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FeeSetups/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#prototype$updateAttributes
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/FeeSetups/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#createChangeStream
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FeeSetups/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.feeSetups.findById() instead.
            "::findById::School::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups.destroyById() instead.
            "::destroyById::School::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeSetups.updateById() instead.
            "::updateById::School::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/feeSetups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.feeSetups() instead.
            "::get::School::feeSetups": {
              isArray: true,
              url: urlBase + "/Schools/:id/feeSetups",
              method: "GET",
            },

            // INTERNAL. Use School.feeSetups.create() instead.
            "::create::School::feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use School.feeSetups.createMany() instead.
            "::createMany::School::feeSetups": {
              isArray: true,
              url: urlBase + "/Schools/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use School.feeSetups.destroyAll() instead.
            "::delete::School::feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups",
              method: "DELETE",
            },

            // INTERNAL. Use School.feeSetups.count() instead.
            "::count::School::feeSetups": {
              url: urlBase + "/Schools/:id/feeSetups/count",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.findById() instead.
            "::findById::Class::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.destroyById() instead.
            "::destroyById::Class::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feeSetups.updateById() instead.
            "::updateById::Class::feeSetups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feeSetups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.feeSetups() instead.
            "::get::Class::feeSetups": {
              isArray: true,
              url: urlBase + "/Classes/:id/feeSetups",
              method: "GET",
            },

            // INTERNAL. Use Class.feeSetups.create() instead.
            "::create::Class::feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use Class.feeSetups.createMany() instead.
            "::createMany::Class::feeSetups": {
              isArray: true,
              url: urlBase + "/Classes/:id/feeSetups",
              method: "POST",
            },

            // INTERNAL. Use Class.feeSetups.destroyAll() instead.
            "::delete::Class::feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feeSetups.count() instead.
            "::count::Class::feeSetups": {
              url: urlBase + "/Classes/:id/feeSetups/count",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.feeSetup() instead.
            "::get::FeePayment::feeSetup": {
              url: urlBase + "/FeePayments/:id/feeSetup",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#patchOrCreate
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#updateOrCreate
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#patchOrCreateWithWhere
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#update
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#destroyById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#removeById
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#patchAttributes
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FeeSetup#modelName
        * @propertyOf lbServices.FeeSetup
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FeeSetup`.
        */
        R.modelName = "FeeSetup";


            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#class
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::FeeSetup::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#school
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::FeeSetup::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.FeeSetup.feePayments
     * @header lbServices.FeeSetup.feePayments
     * @object
     * @description
     *
     * The object `FeeSetup.feePayments` groups methods
     * manipulating `FeePayment` instances related to `FeeSetup`.
     *
     * Call {@link lbServices.FeeSetup#feePayments FeeSetup.feePayments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FeeSetup#feePayments
             * @methodOf lbServices.FeeSetup
             *
             * @description
             *
             * Queries feePayments of FeeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::get::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#count
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Counts feePayments of FeeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.feePayments.count = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::count::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#create
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.create = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::create::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#createMany
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Creates a new instance in feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.createMany = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::createMany::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#destroyAll
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Deletes all feePayments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyAll = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::delete::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#destroyById
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Delete a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.feePayments.destroyById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::destroyById::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#findById
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Find a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.findById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::findById::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeeSetup.feePayments#updateById
             * @methodOf lbServices.FeeSetup.feePayments
             *
             * @description
             *
             * Update a related item by id for feePayments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for feePayments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R.feePayments.updateById = function() {
          var TargetResource = $injector.get("FeePayment");
          var action = TargetResource["::updateById::FeeSetup::feePayments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BusSubscription
 * @header lbServices.BusSubscription
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BusSubscription` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BusSubscription",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/BusSubscriptions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use BusSubscription.busService() instead.
            "prototype$__get__busService": {
              url: urlBase + "/BusSubscriptions/:id/busService",
              method: "GET",
            },

            // INTERNAL. Use BusSubscription.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/BusSubscriptions/:id/student",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#create
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BusSubscriptions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#createMany
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BusSubscriptions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#upsert
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/BusSubscriptions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#replaceOrCreate
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/BusSubscriptions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#upsertWithWhere
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/BusSubscriptions/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#exists
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BusSubscriptions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#findById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BusSubscriptions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#replaceById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/BusSubscriptions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#find
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BusSubscriptions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#findOne
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BusSubscriptions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#updateAll
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/BusSubscriptions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#deleteById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BusSubscriptions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#count
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BusSubscriptions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#prototype$updateAttributes
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/BusSubscriptions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#createChangeStream
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BusSubscriptions/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.busSubscriptions() instead.
            "::get::Student::busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "GET",
            },

            // INTERNAL. Use Student.busSubscriptions.create() instead.
            "::create::Student::busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "POST",
            },

            // INTERNAL. Use Student.busSubscriptions.createMany() instead.
            "::createMany::Student::busSubscriptions": {
              isArray: true,
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "POST",
            },

            // INTERNAL. Use Student.busSubscriptions.update() instead.
            "::update::Student::busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "PUT",
            },

            // INTERNAL. Use Student.busSubscriptions.destroy() instead.
            "::destroy::Student::busSubscriptions": {
              url: urlBase + "/Students/:id/busSubscriptions",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#patchOrCreate
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#updateOrCreate
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#patchOrCreateWithWhere
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#update
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#destroyById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#removeById
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#patchAttributes
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusSubscription` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.BusSubscription#modelName
        * @propertyOf lbServices.BusSubscription
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BusSubscription`.
        */
        R.modelName = "BusSubscription";


            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#busService
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Fetches belongsTo relation busService.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BusService` object.)
             * </em>
             */
        R.busService = function() {
          var TargetResource = $injector.get("BusService");
          var action = TargetResource["::get::BusSubscription::busService"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BusSubscription#student
             * @methodOf lbServices.BusSubscription
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::BusSubscription::student"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Exam
 * @header lbServices.Exam
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Exam` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Exam",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Exams/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Exam.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Exams/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Exam.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Exams/:id/school",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.findById() instead.
            "prototype$__findById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.destroyById() instead.
            "prototype$__destroyById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.marks.updateById() instead.
            "prototype$__updateById__marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Exam.maxMarks.findById() instead.
            "prototype$__findById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.destroyById() instead.
            "prototype$__destroyById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.maxMarks.updateById() instead.
            "prototype$__updateById__maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Exam.marks() instead.
            "prototype$__get__marks": {
              isArray: true,
              url: urlBase + "/Exams/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.create() instead.
            "prototype$__create__marks": {
              url: urlBase + "/Exams/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Exam.marks.destroyAll() instead.
            "prototype$__delete__marks": {
              url: urlBase + "/Exams/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.marks.count() instead.
            "prototype$__count__marks": {
              url: urlBase + "/Exams/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks() instead.
            "prototype$__get__maxMarks": {
              isArray: true,
              url: urlBase + "/Exams/:id/maxMarks",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.create() instead.
            "prototype$__create__maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Exam.maxMarks.destroyAll() instead.
            "prototype$__delete__maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.maxMarks.count() instead.
            "prototype$__count__maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#create
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Exams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#createMany
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Exams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#upsert
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Exams",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#replaceOrCreate
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Exams/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#upsertWithWhere
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Exams/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#exists
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Exams/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#findById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Exams/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#replaceById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Exams/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#find
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Exams",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#findOne
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Exams/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#updateAll
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Exams/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#deleteById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Exams/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#count
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Exams/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#prototype$updateAttributes
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Exams/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Exam#createChangeStream
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Exams/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.exams.findById() instead.
            "::findById::School::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.exams.destroyById() instead.
            "::destroyById::School::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.exams.updateById() instead.
            "::updateById::School::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/exams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.exams() instead.
            "::get::School::exams": {
              isArray: true,
              url: urlBase + "/Schools/:id/exams",
              method: "GET",
            },

            // INTERNAL. Use School.exams.create() instead.
            "::create::School::exams": {
              url: urlBase + "/Schools/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use School.exams.createMany() instead.
            "::createMany::School::exams": {
              isArray: true,
              url: urlBase + "/Schools/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use School.exams.destroyAll() instead.
            "::delete::School::exams": {
              url: urlBase + "/Schools/:id/exams",
              method: "DELETE",
            },

            // INTERNAL. Use School.exams.count() instead.
            "::count::School::exams": {
              url: urlBase + "/Schools/:id/exams/count",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.findById() instead.
            "::findById::Class::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.destroyById() instead.
            "::destroyById::Class::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.exams.updateById() instead.
            "::updateById::Class::exams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/exams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.exams() instead.
            "::get::Class::exams": {
              isArray: true,
              url: urlBase + "/Classes/:id/exams",
              method: "GET",
            },

            // INTERNAL. Use Class.exams.create() instead.
            "::create::Class::exams": {
              url: urlBase + "/Classes/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use Class.exams.createMany() instead.
            "::createMany::Class::exams": {
              isArray: true,
              url: urlBase + "/Classes/:id/exams",
              method: "POST",
            },

            // INTERNAL. Use Class.exams.destroyAll() instead.
            "::delete::Class::exams": {
              url: urlBase + "/Classes/:id/exams",
              method: "DELETE",
            },

            // INTERNAL. Use Class.exams.count() instead.
            "::count::Class::exams": {
              url: urlBase + "/Classes/:id/exams/count",
              method: "GET",
            },

            // INTERNAL. Use Marks.exam() instead.
            "::get::Marks::exam": {
              url: urlBase + "/Marks/:id/exam",
              method: "GET",
            },

            // INTERNAL. Use MaxMark.exam() instead.
            "::get::MaxMark::exam": {
              url: urlBase + "/MaxMarks/:id/exam",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Exam#patchOrCreate
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#updateOrCreate
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#patchOrCreateWithWhere
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#update
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#destroyById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#removeById
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Exam#patchAttributes
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Exam#modelName
        * @propertyOf lbServices.Exam
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Exam`.
        */
        R.modelName = "Exam";


            /**
             * @ngdoc method
             * @name lbServices.Exam#class
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Exam::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam#school
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Exam::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Exam.marks
     * @header lbServices.Exam.marks
     * @object
     * @description
     *
     * The object `Exam.marks` groups methods
     * manipulating `Marks` instances related to `Exam`.
     *
     * Call {@link lbServices.Exam#marks Exam.marks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Exam#marks
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Queries marks of Exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::get::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#count
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Counts marks of Exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.marks.count = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::count::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#create
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.create = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::create::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#createMany
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Creates a new instance in marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.createMany = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::createMany::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#destroyAll
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Deletes all marks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyAll = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::delete::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#destroyById
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Delete a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.marks.destroyById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::destroyById::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#findById
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Find a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.findById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::findById::Exam::marks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.marks#updateById
             * @methodOf lbServices.Exam.marks
             *
             * @description
             *
             * Update a related item by id for marks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for marks
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R.marks.updateById = function() {
          var TargetResource = $injector.get("Marks");
          var action = TargetResource["::updateById::Exam::marks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Exam.maxMarks
     * @header lbServices.Exam.maxMarks
     * @object
     * @description
     *
     * The object `Exam.maxMarks` groups methods
     * manipulating `MaxMark` instances related to `Exam`.
     *
     * Call {@link lbServices.Exam#maxMarks Exam.maxMarks()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Exam#maxMarks
             * @methodOf lbServices.Exam
             *
             * @description
             *
             * Queries maxMarks of Exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::get::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#count
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Counts maxMarks of Exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.maxMarks.count = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::count::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#create
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Creates a new instance in maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.create = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::create::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#createMany
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Creates a new instance in maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.createMany = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::createMany::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#destroyAll
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Deletes all maxMarks of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maxMarks.destroyAll = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::delete::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#destroyById
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Delete a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maxMarks.destroyById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::destroyById::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#findById
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Find a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.findById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::findById::Exam::maxMarks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Exam.maxMarks#updateById
             * @methodOf lbServices.Exam.maxMarks
             *
             * @description
             *
             * Update a related item by id for maxMarks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for maxMarks
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R.maxMarks.updateById = function() {
          var TargetResource = $injector.get("MaxMark");
          var action = TargetResource["::updateById::Exam::maxMarks"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Grade
 * @header lbServices.Grade
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Grade` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Grade",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Grades/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Grade.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/Grades/:id/school",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#create
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Grades",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#createMany
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Grades",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#upsert
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Grades",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#replaceOrCreate
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Grades/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#upsertWithWhere
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Grades/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#exists
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Grades/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#findById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Grades/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#replaceById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Grades/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#find
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Grades",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#findOne
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Grades/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#updateAll
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Grades/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#deleteById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Grades/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#count
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Grades/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#prototype$updateAttributes
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Grades/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Grade#createChangeStream
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Grades/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.grades.findById() instead.
            "::findById::School::grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.grades.destroyById() instead.
            "::destroyById::School::grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.grades.updateById() instead.
            "::updateById::School::grades": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/grades/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.grades() instead.
            "::get::School::grades": {
              isArray: true,
              url: urlBase + "/Schools/:id/grades",
              method: "GET",
            },

            // INTERNAL. Use School.grades.create() instead.
            "::create::School::grades": {
              url: urlBase + "/Schools/:id/grades",
              method: "POST",
            },

            // INTERNAL. Use School.grades.createMany() instead.
            "::createMany::School::grades": {
              isArray: true,
              url: urlBase + "/Schools/:id/grades",
              method: "POST",
            },

            // INTERNAL. Use School.grades.destroyAll() instead.
            "::delete::School::grades": {
              url: urlBase + "/Schools/:id/grades",
              method: "DELETE",
            },

            // INTERNAL. Use School.grades.count() instead.
            "::count::School::grades": {
              url: urlBase + "/Schools/:id/grades/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Grade#patchOrCreate
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#updateOrCreate
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#patchOrCreateWithWhere
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#update
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#destroyById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#removeById
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Grade#patchAttributes
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Grade` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Grade#modelName
        * @propertyOf lbServices.Grade
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Grade`.
        */
        R.modelName = "Grade";


            /**
             * @ngdoc method
             * @name lbServices.Grade#school
             * @methodOf lbServices.Grade
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::Grade::school"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Marks
 * @header lbServices.Marks
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Marks` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Marks",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Marks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Marks.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/Marks/:id/student",
              method: "GET",
            },

            // INTERNAL. Use Marks.class() instead.
            "prototype$__get__class": {
              url: urlBase + "/Marks/:id/class",
              method: "GET",
            },

            // INTERNAL. Use Marks.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/Marks/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use Marks.exam() instead.
            "prototype$__get__exam": {
              url: urlBase + "/Marks/:id/exam",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#create
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Marks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#createMany
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Marks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#upsert
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Marks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#replaceOrCreate
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Marks/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#upsertWithWhere
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Marks/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#exists
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Marks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#findById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Marks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#replaceById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Marks/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#find
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Marks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#findOne
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Marks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#updateAll
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Marks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#deleteById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Marks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#count
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Marks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#prototype$updateAttributes
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Marks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Marks#createChangeStream
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Marks/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.marks.findById() instead.
            "::findById::Student::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.marks.destroyById() instead.
            "::destroyById::Student::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.updateById() instead.
            "::updateById::Student::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.marks() instead.
            "::get::Student::marks": {
              isArray: true,
              url: urlBase + "/Students/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Student.marks.create() instead.
            "::create::Student::marks": {
              url: urlBase + "/Students/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Student.marks.createMany() instead.
            "::createMany::Student::marks": {
              isArray: true,
              url: urlBase + "/Students/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Student.marks.destroyAll() instead.
            "::delete::Student::marks": {
              url: urlBase + "/Students/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.marks.count() instead.
            "::count::Student::marks": {
              url: urlBase + "/Students/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.findById() instead.
            "::findById::Class::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.destroyById() instead.
            "::destroyById::Class::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.marks.updateById() instead.
            "::updateById::Class::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.marks() instead.
            "::get::Class::marks": {
              isArray: true,
              url: urlBase + "/Classes/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Class.marks.create() instead.
            "::create::Class::marks": {
              url: urlBase + "/Classes/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Class.marks.createMany() instead.
            "::createMany::Class::marks": {
              isArray: true,
              url: urlBase + "/Classes/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Class.marks.destroyAll() instead.
            "::delete::Class::marks": {
              url: urlBase + "/Classes/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Class.marks.count() instead.
            "::count::Class::marks": {
              url: urlBase + "/Classes/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.findById() instead.
            "::findById::Subject::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.destroyById() instead.
            "::destroyById::Subject::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.marks.updateById() instead.
            "::updateById::Subject::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.marks() instead.
            "::get::Subject::marks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Subject.marks.create() instead.
            "::create::Subject::marks": {
              url: urlBase + "/Subjects/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Subject.marks.createMany() instead.
            "::createMany::Subject::marks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Subject.marks.destroyAll() instead.
            "::delete::Subject::marks": {
              url: urlBase + "/Subjects/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.marks.count() instead.
            "::count::Subject::marks": {
              url: urlBase + "/Subjects/:id/marks/count",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.findById() instead.
            "::findById::Exam::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.destroyById() instead.
            "::destroyById::Exam::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.marks.updateById() instead.
            "::updateById::Exam::marks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/marks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Exam.marks() instead.
            "::get::Exam::marks": {
              isArray: true,
              url: urlBase + "/Exams/:id/marks",
              method: "GET",
            },

            // INTERNAL. Use Exam.marks.create() instead.
            "::create::Exam::marks": {
              url: urlBase + "/Exams/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Exam.marks.createMany() instead.
            "::createMany::Exam::marks": {
              isArray: true,
              url: urlBase + "/Exams/:id/marks",
              method: "POST",
            },

            // INTERNAL. Use Exam.marks.destroyAll() instead.
            "::delete::Exam::marks": {
              url: urlBase + "/Exams/:id/marks",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.marks.count() instead.
            "::count::Exam::marks": {
              url: urlBase + "/Exams/:id/marks/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Marks#patchOrCreate
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#updateOrCreate
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#patchOrCreateWithWhere
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#update
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#destroyById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#removeById
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Marks#patchAttributes
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Marks` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Marks#modelName
        * @propertyOf lbServices.Marks
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Marks`.
        */
        R.modelName = "Marks";


            /**
             * @ngdoc method
             * @name lbServices.Marks#student
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Marks::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Marks#class
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Fetches belongsTo relation class.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Class` object.)
             * </em>
             */
        R.class = function() {
          var TargetResource = $injector.get("Class");
          var action = TargetResource["::get::Marks::class"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Marks#subject
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::Marks::subject"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Marks#exam
             * @methodOf lbServices.Marks
             *
             * @description
             *
             * Fetches belongsTo relation exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exam = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::get::Marks::exam"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FeePayment
 * @header lbServices.FeePayment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FeePayment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FeePayment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FeePayments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FeePayment.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/FeePayments/:id/student",
              method: "GET",
            },

            // INTERNAL. Use FeePayment.feeSetup() instead.
            "prototype$__get__feeSetup": {
              url: urlBase + "/FeePayments/:id/feeSetup",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#create
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FeePayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#createMany
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FeePayments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#upsert
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/FeePayments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#replaceOrCreate
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FeePayments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#upsertWithWhere
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FeePayments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#exists
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FeePayments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#findById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FeePayments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#replaceById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FeePayments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#find
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FeePayments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#findOne
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FeePayments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#updateAll
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FeePayments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#deleteById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FeePayments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#count
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FeePayments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#prototype$updateAttributes
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/FeePayments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#createChangeStream
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FeePayments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Class.feePayments.findById() instead.
            "::findById::Class::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments.destroyById() instead.
            "::destroyById::Class::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feePayments.updateById() instead.
            "::updateById::Class::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Classes/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Class.feePayments() instead.
            "::get::Class::feePayments": {
              isArray: true,
              url: urlBase + "/Classes/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use Class.feePayments.create() instead.
            "::create::Class::feePayments": {
              url: urlBase + "/Classes/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use Class.feePayments.createMany() instead.
            "::createMany::Class::feePayments": {
              isArray: true,
              url: urlBase + "/Classes/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use Class.feePayments.destroyAll() instead.
            "::delete::Class::feePayments": {
              url: urlBase + "/Classes/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use Class.feePayments.count() instead.
            "::count::Class::feePayments": {
              url: urlBase + "/Classes/:id/feePayments/count",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.findById() instead.
            "::findById::FeeSetup::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.destroyById() instead.
            "::destroyById::FeeSetup::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feePayments.updateById() instead.
            "::updateById::FeeSetup::feePayments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeeSetups/:id/feePayments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeeSetup.feePayments() instead.
            "::get::FeeSetup::feePayments": {
              isArray: true,
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "GET",
            },

            // INTERNAL. Use FeeSetup.feePayments.create() instead.
            "::create::FeeSetup::feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feePayments.createMany() instead.
            "::createMany::FeeSetup::feePayments": {
              isArray: true,
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "POST",
            },

            // INTERNAL. Use FeeSetup.feePayments.destroyAll() instead.
            "::delete::FeeSetup::feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments",
              method: "DELETE",
            },

            // INTERNAL. Use FeeSetup.feePayments.count() instead.
            "::count::FeeSetup::feePayments": {
              url: urlBase + "/FeeSetups/:id/feePayments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FeePayment#patchOrCreate
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#updateOrCreate
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#patchOrCreateWithWhere
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#update
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#destroyById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#removeById
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#patchAttributes
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeePayment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FeePayment#modelName
        * @propertyOf lbServices.FeePayment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FeePayment`.
        */
        R.modelName = "FeePayment";


            /**
             * @ngdoc method
             * @name lbServices.FeePayment#student
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::FeePayment::student"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeePayment#feeSetup
             * @methodOf lbServices.FeePayment
             *
             * @description
             *
             * Fetches belongsTo relation feeSetup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeeSetup` object.)
             * </em>
             */
        R.feeSetup = function() {
          var TargetResource = $injector.get("FeeSetup");
          var action = TargetResource["::get::FeePayment::feeSetup"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Mail
 * @header lbServices.Mail
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Mail` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Mail",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Mails/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Mail#create
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Mails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#createMany
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Mails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#upsert
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Mails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#replaceOrCreate
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Mails/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#upsertWithWhere
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Mails/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#exists
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Mails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#findById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Mails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#replaceById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Mails/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#find
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Mails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#findOne
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Mails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#updateAll
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Mails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#deleteById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Mails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#count
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Mails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#prototype$updateAttributes
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Mails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mail#createChangeStream
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Mails/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Mail#patchOrCreate
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#updateOrCreate
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#patchOrCreateWithWhere
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#update
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#destroyById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#removeById
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Mail#patchAttributes
             * @methodOf lbServices.Mail
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mail` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Mail#modelName
        * @propertyOf lbServices.Mail
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Mail`.
        */
        R.modelName = "Mail";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Remarks
 * @header lbServices.Remarks
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Remarks` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Remarks",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Remarks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Remarks.student() instead.
            "prototype$__get__student": {
              url: urlBase + "/Remarks/:id/student",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#create
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Remarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#createMany
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Remarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#upsert
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Remarks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#replaceOrCreate
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Remarks/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#upsertWithWhere
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Remarks/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#exists
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Remarks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#findById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Remarks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#replaceById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Remarks/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#find
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Remarks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#findOne
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Remarks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#updateAll
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Remarks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#deleteById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Remarks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#count
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Remarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#prototype$updateAttributes
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Remarks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Remarks#createChangeStream
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Remarks/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Student.remarks.findById() instead.
            "::findById::Student::remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks.destroyById() instead.
            "::destroyById::Student::remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Student.remarks.updateById() instead.
            "::updateById::Student::remarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Students/:id/remarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Student.remarks() instead.
            "::get::Student::remarks": {
              isArray: true,
              url: urlBase + "/Students/:id/remarks",
              method: "GET",
            },

            // INTERNAL. Use Student.remarks.create() instead.
            "::create::Student::remarks": {
              url: urlBase + "/Students/:id/remarks",
              method: "POST",
            },

            // INTERNAL. Use Student.remarks.createMany() instead.
            "::createMany::Student::remarks": {
              isArray: true,
              url: urlBase + "/Students/:id/remarks",
              method: "POST",
            },

            // INTERNAL. Use Student.remarks.destroyAll() instead.
            "::delete::Student::remarks": {
              url: urlBase + "/Students/:id/remarks",
              method: "DELETE",
            },

            // INTERNAL. Use Student.remarks.count() instead.
            "::count::Student::remarks": {
              url: urlBase + "/Students/:id/remarks/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Remarks#patchOrCreate
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#updateOrCreate
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#patchOrCreateWithWhere
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#update
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#destroyById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#removeById
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Remarks#patchAttributes
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Remarks` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Remarks#modelName
        * @propertyOf lbServices.Remarks
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Remarks`.
        */
        R.modelName = "Remarks";


            /**
             * @ngdoc method
             * @name lbServices.Remarks#student
             * @methodOf lbServices.Remarks
             *
             * @description
             *
             * Fetches belongsTo relation student.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Student` object.)
             * </em>
             */
        R.student = function() {
          var TargetResource = $injector.get("Student");
          var action = TargetResource["::get::Remarks::student"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.WorkingDay
 * @header lbServices.WorkingDay
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `WorkingDay` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "WorkingDay",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/WorkingDays/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use WorkingDay.school() instead.
            "prototype$__get__school": {
              url: urlBase + "/WorkingDays/:id/school",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.findById() instead.
            "prototype$__findById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.destroyById() instead.
            "prototype$__destroyById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use WorkingDay.schedules.updateById() instead.
            "prototype$__updateById__schedules": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/WorkingDays/:id/schedules/:fk",
              method: "PUT",
            },

            // INTERNAL. Use WorkingDay.schedules() instead.
            "prototype$__get__schedules": {
              isArray: true,
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "GET",
            },

            // INTERNAL. Use WorkingDay.schedules.create() instead.
            "prototype$__create__schedules": {
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "POST",
            },

            // INTERNAL. Use WorkingDay.schedules.destroyAll() instead.
            "prototype$__delete__schedules": {
              url: urlBase + "/WorkingDays/:id/schedules",
              method: "DELETE",
            },

            // INTERNAL. Use WorkingDay.schedules.count() instead.
            "prototype$__count__schedules": {
              url: urlBase + "/WorkingDays/:id/schedules/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#create
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/WorkingDays",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#createMany
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/WorkingDays",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#upsert
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/WorkingDays",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#replaceOrCreate
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/WorkingDays/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#upsertWithWhere
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/WorkingDays/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#exists
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/WorkingDays/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#findById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/WorkingDays/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#replaceById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/WorkingDays/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#find
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/WorkingDays",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#findOne
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/WorkingDays/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#updateAll
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/WorkingDays/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#deleteById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/WorkingDays/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#count
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/WorkingDays/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#prototype$updateAttributes
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/WorkingDays/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#createChangeStream
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/WorkingDays/change-stream",
              method: "POST",
            },

            // INTERNAL. Use School.workingDays.findById() instead.
            "::findById::School::workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays.destroyById() instead.
            "::destroyById::School::workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use School.workingDays.updateById() instead.
            "::updateById::School::workingDays": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Schools/:id/workingDays/:fk",
              method: "PUT",
            },

            // INTERNAL. Use School.workingDays() instead.
            "::get::School::workingDays": {
              isArray: true,
              url: urlBase + "/Schools/:id/workingDays",
              method: "GET",
            },

            // INTERNAL. Use School.workingDays.create() instead.
            "::create::School::workingDays": {
              url: urlBase + "/Schools/:id/workingDays",
              method: "POST",
            },

            // INTERNAL. Use School.workingDays.createMany() instead.
            "::createMany::School::workingDays": {
              isArray: true,
              url: urlBase + "/Schools/:id/workingDays",
              method: "POST",
            },

            // INTERNAL. Use School.workingDays.destroyAll() instead.
            "::delete::School::workingDays": {
              url: urlBase + "/Schools/:id/workingDays",
              method: "DELETE",
            },

            // INTERNAL. Use School.workingDays.count() instead.
            "::count::School::workingDays": {
              url: urlBase + "/Schools/:id/workingDays/count",
              method: "GET",
            },

            // INTERNAL. Use Schedule.workingDay() instead.
            "::get::Schedule::workingDay": {
              url: urlBase + "/Schedules/:id/workingDay",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#patchOrCreate
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#updateOrCreate
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#patchOrCreateWithWhere
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#update
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#destroyById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#removeById
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#patchAttributes
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkingDay` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.WorkingDay#modelName
        * @propertyOf lbServices.WorkingDay
        * @description
        * The name of the model represented by this $resource,
        * i.e. `WorkingDay`.
        */
        R.modelName = "WorkingDay";


            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#school
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Fetches belongsTo relation school.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `School` object.)
             * </em>
             */
        R.school = function() {
          var TargetResource = $injector.get("School");
          var action = TargetResource["::get::WorkingDay::school"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.WorkingDay.schedules
     * @header lbServices.WorkingDay.schedules
     * @object
     * @description
     *
     * The object `WorkingDay.schedules` groups methods
     * manipulating `Schedule` instances related to `WorkingDay`.
     *
     * Call {@link lbServices.WorkingDay#schedules WorkingDay.schedules()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.WorkingDay#schedules
             * @methodOf lbServices.WorkingDay
             *
             * @description
             *
             * Queries schedules of WorkingDay.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::get::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#count
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Counts schedules of WorkingDay.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.schedules.count = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::count::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#create
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.create = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::create::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#createMany
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Creates a new instance in schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.createMany = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::createMany::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#destroyAll
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Deletes all schedules of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyAll = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::delete::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#destroyById
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Delete a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.schedules.destroyById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::destroyById::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#findById
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Find a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.findById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::findById::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkingDay.schedules#updateById
             * @methodOf lbServices.WorkingDay.schedules
             *
             * @description
             *
             * Update a related item by id for schedules.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for schedules
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Schedule` object.)
             * </em>
             */
        R.schedules.updateById = function() {
          var TargetResource = $injector.get("Schedule");
          var action = TargetResource["::updateById::WorkingDay::schedules"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.MaxMark
 * @header lbServices.MaxMark
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `MaxMark` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "MaxMark",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/MaxMarks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use MaxMark.subject() instead.
            "prototype$__get__subject": {
              url: urlBase + "/MaxMarks/:id/subject",
              method: "GET",
            },

            // INTERNAL. Use MaxMark.exam() instead.
            "prototype$__get__exam": {
              url: urlBase + "/MaxMarks/:id/exam",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#create
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/MaxMarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#createMany
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/MaxMarks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#upsert
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/MaxMarks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#replaceOrCreate
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/MaxMarks/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#upsertWithWhere
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/MaxMarks/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#exists
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/MaxMarks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#findById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/MaxMarks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#replaceById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/MaxMarks/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#find
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/MaxMarks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#findOne
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/MaxMarks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#updateAll
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/MaxMarks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#deleteById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/MaxMarks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#count
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/MaxMarks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#prototype$updateAttributes
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/MaxMarks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#createChangeStream
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/MaxMarks/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Subject.maxMarks.findById() instead.
            "::findById::Subject::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks.destroyById() instead.
            "::destroyById::Subject::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.maxMarks.updateById() instead.
            "::updateById::Subject::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Subjects/:id/maxMarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Subject.maxMarks() instead.
            "::get::Subject::maxMarks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "GET",
            },

            // INTERNAL. Use Subject.maxMarks.create() instead.
            "::create::Subject::maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Subject.maxMarks.createMany() instead.
            "::createMany::Subject::maxMarks": {
              isArray: true,
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Subject.maxMarks.destroyAll() instead.
            "::delete::Subject::maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks",
              method: "DELETE",
            },

            // INTERNAL. Use Subject.maxMarks.count() instead.
            "::count::Subject::maxMarks": {
              url: urlBase + "/Subjects/:id/maxMarks/count",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.findById() instead.
            "::findById::Exam::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.destroyById() instead.
            "::destroyById::Exam::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.maxMarks.updateById() instead.
            "::updateById::Exam::maxMarks": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Exams/:id/maxMarks/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Exam.maxMarks() instead.
            "::get::Exam::maxMarks": {
              isArray: true,
              url: urlBase + "/Exams/:id/maxMarks",
              method: "GET",
            },

            // INTERNAL. Use Exam.maxMarks.create() instead.
            "::create::Exam::maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Exam.maxMarks.createMany() instead.
            "::createMany::Exam::maxMarks": {
              isArray: true,
              url: urlBase + "/Exams/:id/maxMarks",
              method: "POST",
            },

            // INTERNAL. Use Exam.maxMarks.destroyAll() instead.
            "::delete::Exam::maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks",
              method: "DELETE",
            },

            // INTERNAL. Use Exam.maxMarks.count() instead.
            "::count::Exam::maxMarks": {
              url: urlBase + "/Exams/:id/maxMarks/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.MaxMark#patchOrCreate
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#updateOrCreate
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#patchOrCreateWithWhere
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#update
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#destroyById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#removeById
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#patchAttributes
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MaxMark` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.MaxMark#modelName
        * @propertyOf lbServices.MaxMark
        * @description
        * The name of the model represented by this $resource,
        * i.e. `MaxMark`.
        */
        R.modelName = "MaxMark";


            /**
             * @ngdoc method
             * @name lbServices.MaxMark#subject
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Fetches belongsTo relation subject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Subject` object.)
             * </em>
             */
        R.subject = function() {
          var TargetResource = $injector.get("Subject");
          var action = TargetResource["::get::MaxMark::subject"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.MaxMark#exam
             * @methodOf lbServices.MaxMark
             *
             * @description
             *
             * Fetches belongsTo relation exam.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Exam` object.)
             * </em>
             */
        R.exam = function() {
          var TargetResource = $injector.get("Exam");
          var action = TargetResource["::get::MaxMark::exam"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
